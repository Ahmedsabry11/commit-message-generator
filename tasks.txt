1. uses openai models gpt3.5 - gpt4 - gpt4 -o , mini.
2. uses gemini models .
3. design different prompts for commit message generation and fine tune it to get best result.
4. generate samples for designing prompts and evaluating different LLMs and evaluating different prompts.
5. apply different evaluation critieria for comparing commit message semantic meaning.
6. Use RAG as new solution for to enhance abiltiy of commit message Generation.

1. try different models such as gpt3.5, gpt4-o, gemini, deepseek-v1 if available.
2. try different evaluation critieria and methods for evaluating different prompts output.
3. generate samples from distribution of data for each language.
4. try RAG or similar approach where you enter samples near code and should be taken as reference.
5. tune different prompts such as styling prompts.

Abstract
Introduction
BackGround or Problem Statement
Related Work
Study Design
Results
Conclusion
Acknowledgment
References



