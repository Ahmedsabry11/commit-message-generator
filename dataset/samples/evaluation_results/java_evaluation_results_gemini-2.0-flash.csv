diff,expected_message,prompt_style,inference_message
"diff --git a/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java b/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
index <HASH>..<HASH> 100644
--- a/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
+++ b/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
@@ -179,6 +179,8 @@ public class ResourceFactory {
 			r = WARCArchiveRecordToResource(reader.get(), reader);
 
 		} else {
+			is.close();
+			raf.close();
 			throw new ResourceNotAvailableException(""Unknown extension"");
 		}",Dealt with a small resource leak.,zero_shot,Fix: Close input streams when encountering an unknown file extension in ResourceFactory.
"diff --git a/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java b/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
index <HASH>..<HASH> 100644
--- a/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
+++ b/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
@@ -179,6 +179,8 @@ public class ResourceFactory {
 			r = WARCArchiveRecordToResource(reader.get(), reader);
 
 		} else {
+			is.close();
+			raf.close();
 			throw new ResourceNotAvailableException(""Unknown extension"");
 		}",Dealt with a small resource leak.,conventional,fix: Close resources on unknown extension in ResourceFactory
"diff --git a/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java b/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
index <HASH>..<HASH> 100644
--- a/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
+++ b/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
@@ -179,6 +179,8 @@ public class ResourceFactory {
 			r = WARCArchiveRecordToResource(reader.get(), reader);
 
 		} else {
+			is.close();
+			raf.close();
 			throw new ResourceNotAvailableException(""Unknown extension"");
 		}",Dealt with a small resource leak.,imperative,Close input streams when resource type is unknown.
"diff --git a/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java b/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
index <HASH>..<HASH> 100644
--- a/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
+++ b/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
@@ -179,6 +179,8 @@ public class ResourceFactory {
 			r = WARCArchiveRecordToResource(reader.get(), reader);
 
 		} else {
+			is.close();
+			raf.close();
 			throw new ResourceNotAvailableException(""Unknown extension"");
 		}",Dealt with a small resource leak.,minimal,"Fix: Close streams on unknown extension

Closes input stream and random access file stream when an unknown extension is encountered to prevent resource leaks."
"diff --git a/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java b/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
index <HASH>..<HASH> 100644
--- a/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
+++ b/wayback-core/src/main/java/org/archive/wayback/resourcestore/resourcefile/ResourceFactory.java
@@ -179,6 +179,8 @@ public class ResourceFactory {
 			r = WARCArchiveRecordToResource(reader.get(), reader);
 
 		} else {
+			is.close();
+			raf.close();
 			throw new ResourceNotAvailableException(""Unknown extension"");
 		}",Dealt with a small resource leak.,detailed,"Fix: Close resources on unknown file extension in ResourceFactory

This commit addresses a resource leak in the `ResourceFactory` class. Specifically, when the factory encounters a file with an unknown extension (i.e., not "".arc"", "".arc.gz"", "".warc"", or "".warc.gz""), it throws a `ResourceNotAvailableException` but fails to close the underlying `InputStream` (`is`) and `RandomAccessFile` (`raf`).

This commit adds the following lines before throwing the exception:

```java
is.close();
raf.close();
```

This ensures that the resources associated with the file are properly closed, preventing potential resource leaks and improving the stability of the application."
"diff --git a/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java b/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
index <HASH>..<HASH> 100644
--- a/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
+++ b/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
@@ -55,7 +55,7 @@ public class TestLOCI extends AbstractSimpleAlgorithmTest implements JUnit4Test 
     // run LOCI on database
     OutlierResult result = loci.run(db);
 
-    testAUC(db, ""Noise"", result, 0.954444);
-    testSingleScore(result, 146, 4.14314916);
+    testAUC(db, ""Noise"", result, 0.96222222);
+    testSingleScore(result, 146, 3.8054382);
   }
 }
\ No newline at end of file","Update unit test, score has slightly improved.",zero_shot,Update expected AUC and single score values for LOCI test due to code changes.
"diff --git a/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java b/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
index <HASH>..<HASH> 100644
--- a/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
+++ b/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
@@ -55,7 +55,7 @@ public class TestLOCI extends AbstractSimpleAlgorithmTest implements JUnit4Test 
     // run LOCI on database
     OutlierResult result = loci.run(db);
 
-    testAUC(db, ""Noise"", result, 0.954444);
-    testSingleScore(result, 146, 4.14314916);
+    testAUC(db, ""Noise"", result, 0.96222222);
+    testSingleScore(result, 146, 3.8054382);
   }
 }
\ No newline at end of file","Update unit test, score has slightly improved.",conventional,"fix: Fix AUC and outlier score in TestLOCI

The test values were slightly off."
"diff --git a/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java b/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
index <HASH>..<HASH> 100644
--- a/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
+++ b/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
@@ -55,7 +55,7 @@ public class TestLOCI extends AbstractSimpleAlgorithmTest implements JUnit4Test 
     // run LOCI on database
     OutlierResult result = loci.run(db);
 
-    testAUC(db, ""Noise"", result, 0.954444);
-    testSingleScore(result, 146, 4.14314916);
+    testAUC(db, ""Noise"", result, 0.96222222);
+    testSingleScore(result, 146, 3.8054382);
   }
 }
\ No newline at end of file","Update unit test, score has slightly improved.",imperative,Update LOCI test to reflect score changes
"diff --git a/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java b/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
index <HASH>..<HASH> 100644
--- a/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
+++ b/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
@@ -55,7 +55,7 @@ public class TestLOCI extends AbstractSimpleAlgorithmTest implements JUnit4Test 
     // run LOCI on database
     OutlierResult result = loci.run(db);
 
-    testAUC(db, ""Noise"", result, 0.954444);
-    testSingleScore(result, 146, 4.14314916);
+    testAUC(db, ""Noise"", result, 0.96222222);
+    testSingleScore(result, 146, 3.8054382);
   }
 }
\ No newline at end of file","Update unit test, score has slightly improved.",minimal,"Fix: Adjust LOCI test expectations

The AUC and single score expectations in the LOCI test were updated to reflect changes in the algorithm's behavior."
"diff --git a/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java b/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
index <HASH>..<HASH> 100644
--- a/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
+++ b/test/de/lmu/ifi/dbs/elki/algorithm/outlier/TestLOCI.java
@@ -55,7 +55,7 @@ public class TestLOCI extends AbstractSimpleAlgorithmTest implements JUnit4Test 
     // run LOCI on database
     OutlierResult result = loci.run(db);
 
-    testAUC(db, ""Noise"", result, 0.954444);
-    testSingleScore(result, 146, 4.14314916);
+    testAUC(db, ""Noise"", result, 0.96222222);
+    testSingleScore(result, 146, 3.8054382);
   }
 }
\ No newline at end of file","Update unit test, score has slightly improved.",detailed,"Fix: Update expected AUC and single score values for LOCI test

The expected AUC and single score values in the TestLOCI test class were outdated, causing the test to fail. This commit updates these values to reflect the current output of the LOCI algorithm. The changes are based on re-running the test and observing the actual output."
"diff --git a/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java b/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
index <HASH>..<HASH> 100644
--- a/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
+++ b/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
@@ -65,7 +65,7 @@ public class AppDeployer extends RapidoidThing {
 			""java"",
 			""-cp"", CLASSPATH,
 			""org.rapidoid.platform.DefaultApp"",
-			""root=/app"",
+			""root="" + Env.root(),
 			""mode="" + Env.mode().name().toLowerCase()
 		};",Pass the correct root when running an application.,zero_shot,Fix: Pass the correct root path to the deployed application.
"diff --git a/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java b/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
index <HASH>..<HASH> 100644
--- a/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
+++ b/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
@@ -65,7 +65,7 @@ public class AppDeployer extends RapidoidThing {
 			""java"",
 			""-cp"", CLASSPATH,
 			""org.rapidoid.platform.DefaultApp"",
-			""root=/app"",
+			""root="" + Env.root(),
 			""mode="" + Env.mode().name().toLowerCase()
 		};",Pass the correct root when running an application.,conventional,"fix: use Env.root() instead of hardcoded ""/app"" for app root directory

The commit fixes an issue where the app root directory was hardcoded to ""/app"", which could cause problems if the user wanted to deploy the app to a different directory. By using Env.root(), the app root directory is now dynamically determined based on the environment configuration."
"diff --git a/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java b/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
index <HASH>..<HASH> 100644
--- a/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
+++ b/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
@@ -65,7 +65,7 @@ public class AppDeployer extends RapidoidThing {
 			""java"",
 			""-cp"", CLASSPATH,
 			""org.rapidoid.platform.DefaultApp"",
-			""root=/app"",
+			""root="" + Env.root(),
 			""mode="" + Env.mode().name().toLowerCase()
 		};",Pass the correct root when running an application.,imperative,"Use Env.root() instead of hardcoded ""/app"" for the root directory."
"diff --git a/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java b/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
index <HASH>..<HASH> 100644
--- a/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
+++ b/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
@@ -65,7 +65,7 @@ public class AppDeployer extends RapidoidThing {
 			""java"",
 			""-cp"", CLASSPATH,
 			""org.rapidoid.platform.DefaultApp"",
-			""root=/app"",
+			""root="" + Env.root(),
 			""mode="" + Env.mode().name().toLowerCase()
 		};",Pass the correct root when running an application.,minimal,"Fix: Use Env.root() instead of hardcoded ""/app""

The hardcoded ""/app"" was not flexible. This commit changes it to use Env.root() to allow for different root directories."
"diff --git a/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java b/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
index <HASH>..<HASH> 100644
--- a/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
+++ b/rapidoid-platform/src/main/java/org/rapidoid/deploy/AppDeployer.java
@@ -65,7 +65,7 @@ public class AppDeployer extends RapidoidThing {
 			""java"",
 			""-cp"", CLASSPATH,
 			""org.rapidoid.platform.DefaultApp"",
-			""root=/app"",
+			""root="" + Env.root(),
 			""mode="" + Env.mode().name().toLowerCase()
 		};",Pass the correct root when running an application.,detailed,"Fix: Pass correct root path to DefaultApp

The previous implementation was hardcoding the root path as ""/app"" when starting the DefaultApp process. This commit fixes this issue by dynamically passing the root path using `Env.root()`. This ensures that the DefaultApp process receives the correct root path from the environment, aligning its behavior with the intended configuration."
"diff --git a/structr-core/src/main/java/org/structr/core/script/Scripting.java b/structr-core/src/main/java/org/structr/core/script/Scripting.java
index <HASH>..<HASH> 100644
--- a/structr-core/src/main/java/org/structr/core/script/Scripting.java
+++ b/structr-core/src/main/java/org/structr/core/script/Scripting.java
@@ -428,6 +428,9 @@ public class Scripting {
 					if (o instanceof ExternalPtr) {
 
 						listResult.add(((ExternalPtr)o).getInstance());
+					} else {
+
+						listResult.add(o);
 					}
 				}",Fixes issue with PyList results in Python engine results.,zero_shot,Ensure ExternalPtr objects are unwrapped before being added to the result list.
"diff --git a/structr-core/src/main/java/org/structr/core/script/Scripting.java b/structr-core/src/main/java/org/structr/core/script/Scripting.java
index <HASH>..<HASH> 100644
--- a/structr-core/src/main/java/org/structr/core/script/Scripting.java
+++ b/structr-core/src/main/java/org/structr/core/script/Scripting.java
@@ -428,6 +428,9 @@ public class Scripting {
 					if (o instanceof ExternalPtr) {
 
 						listResult.add(((ExternalPtr)o).getInstance());
+					} else {
+
+						listResult.add(o);
 					}
 				}",Fixes issue with PyList results in Python engine results.,conventional,
"diff --git a/structr-core/src/main/java/org/structr/core/script/Scripting.java b/structr-core/src/main/java/org/structr/core/script/Scripting.java
index <HASH>..<HASH> 100644
--- a/structr-core/src/main/java/org/structr/core/script/Scripting.java
+++ b/structr-core/src/main/java/org/structr/core/script/Scripting.java
@@ -428,6 +428,9 @@ public class Scripting {
 					if (o instanceof ExternalPtr) {
 
 						listResult.add(((ExternalPtr)o).getInstance());
+					} else {
+
+						listResult.add(o);
 					}
 				}",Fixes issue with PyList results in Python engine results.,imperative,
"diff --git a/structr-core/src/main/java/org/structr/core/script/Scripting.java b/structr-core/src/main/java/org/structr/core/script/Scripting.java
index <HASH>..<HASH> 100644
--- a/structr-core/src/main/java/org/structr/core/script/Scripting.java
+++ b/structr-core/src/main/java/org/structr/core/script/Scripting.java
@@ -428,6 +428,9 @@ public class Scripting {
 					if (o instanceof ExternalPtr) {
 
 						listResult.add(((ExternalPtr)o).getInstance());
+					} else {
+
+						listResult.add(o);
 					}
 				}",Fixes issue with PyList results in Python engine results.,minimal,
"diff --git a/structr-core/src/main/java/org/structr/core/script/Scripting.java b/structr-core/src/main/java/org/structr/core/script/Scripting.java
index <HASH>..<HASH> 100644
--- a/structr-core/src/main/java/org/structr/core/script/Scripting.java
+++ b/structr-core/src/main/java/org/structr/core/script/Scripting.java
@@ -428,6 +428,9 @@ public class Scripting {
 					if (o instanceof ExternalPtr) {
 
 						listResult.add(((ExternalPtr)o).getInstance());
+					} else {
+
+						listResult.add(o);
 					}
 				}",Fixes issue with PyList results in Python engine results.,detailed,
"diff --git a/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java b/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
index <HASH>..<HASH> 100644
--- a/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
+++ b/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
@@ -114,5 +114,6 @@ public class Player {
                 fail( t.getMessage() );
             }
         }
+        stagedReactor.tearDown();
     }
 }",PAXEXAM-<I> Bugfixed missing tearDown call.,zero_shot,
"diff --git a/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java b/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
index <HASH>..<HASH> 100644
--- a/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
+++ b/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
@@ -114,5 +114,6 @@ public class Player {
                 fail( t.getMessage() );
             }
         }
+        stagedReactor.tearDown();
     }
 }",PAXEXAM-<I> Bugfixed missing tearDown call.,conventional,
"diff --git a/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java b/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
index <HASH>..<HASH> 100644
--- a/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
+++ b/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
@@ -114,5 +114,6 @@ public class Player {
                 fail( t.getMessage() );
             }
         }
+        stagedReactor.tearDown();
     }
 }",PAXEXAM-<I> Bugfixed missing tearDown call.,imperative,
"diff --git a/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java b/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
index <HASH>..<HASH> 100644
--- a/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
+++ b/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
@@ -114,5 +114,6 @@ public class Player {
                 fail( t.getMessage() );
             }
         }
+        stagedReactor.tearDown();
     }
 }",PAXEXAM-<I> Bugfixed missing tearDown call.,minimal,
"diff --git a/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java b/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
index <HASH>..<HASH> 100644
--- a/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
+++ b/drivers/pax-exam-player/src/main/java/org/ops4j/pax/exam/player/Player.java
@@ -114,5 +114,6 @@ public class Player {
                 fail( t.getMessage() );
             }
         }
+        stagedReactor.tearDown();
     }
 }",PAXEXAM-<I> Bugfixed missing tearDown call.,detailed,
"diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java
index <HASH>..<HASH> 100644
--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -2650,7 +2650,7 @@ public class Node implements Serializable {
    */
   public final void setSideEffectFlags(int flags) {
     checkArgument(
-        this.getToken() == Token.CALL || this.getToken() == Token.NEW,
+        this.isCall() || this.isNew(),
         ""setIsNoSideEffectsCall only supports CALL and NEW nodes, got %s"",
         this.getToken());","Simplify expressions involving Rhino Nodes #2

-------------
Created by MOE: <URL>",zero_shot,
"diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java
index <HASH>..<HASH> 100644
--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -2650,7 +2650,7 @@ public class Node implements Serializable {
    */
   public final void setSideEffectFlags(int flags) {
     checkArgument(
-        this.getToken() == Token.CALL || this.getToken() == Token.NEW,
+        this.isCall() || this.isNew(),
         ""setIsNoSideEffectsCall only supports CALL and NEW nodes, got %s"",
         this.getToken());","Simplify expressions involving Rhino Nodes #2

-------------
Created by MOE: <URL>",conventional,
"diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java
index <HASH>..<HASH> 100644
--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -2650,7 +2650,7 @@ public class Node implements Serializable {
    */
   public final void setSideEffectFlags(int flags) {
     checkArgument(
-        this.getToken() == Token.CALL || this.getToken() == Token.NEW,
+        this.isCall() || this.isNew(),
         ""setIsNoSideEffectsCall only supports CALL and NEW nodes, got %s"",
         this.getToken());","Simplify expressions involving Rhino Nodes #2

-------------
Created by MOE: <URL>",imperative,
"diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java
index <HASH>..<HASH> 100644
--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -2650,7 +2650,7 @@ public class Node implements Serializable {
    */
   public final void setSideEffectFlags(int flags) {
     checkArgument(
-        this.getToken() == Token.CALL || this.getToken() == Token.NEW,
+        this.isCall() || this.isNew(),
         ""setIsNoSideEffectsCall only supports CALL and NEW nodes, got %s"",
         this.getToken());","Simplify expressions involving Rhino Nodes #2

-------------
Created by MOE: <URL>",minimal,
"diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java
index <HASH>..<HASH> 100644
--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -2650,7 +2650,7 @@ public class Node implements Serializable {
    */
   public final void setSideEffectFlags(int flags) {
     checkArgument(
-        this.getToken() == Token.CALL || this.getToken() == Token.NEW,
+        this.isCall() || this.isNew(),
         ""setIsNoSideEffectsCall only supports CALL and NEW nodes, got %s"",
         this.getToken());","Simplify expressions involving Rhino Nodes #2

-------------
Created by MOE: <URL>",detailed,
"diff --git a/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java b/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
+++ b/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
@@ -135,7 +135,8 @@ public class SqlServerDatabaseType extends BaseDatabaseType {
 
 	@Override
 	public void appendInsertNoColumns(StringBuilder sb) {
-		sb.append(""DEFAULT VALUES"");
+		// may be: sb.append(""DEFAULT VALUES"");
+		super.appendInsertNoColumns(sb);
 	}
 
 	/**","Switched back to the default because I can't verify if this is a problem
currently.",zero_shot,
"diff --git a/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java b/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
+++ b/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
@@ -135,7 +135,8 @@ public class SqlServerDatabaseType extends BaseDatabaseType {
 
 	@Override
 	public void appendInsertNoColumns(StringBuilder sb) {
-		sb.append(""DEFAULT VALUES"");
+		// may be: sb.append(""DEFAULT VALUES"");
+		super.appendInsertNoColumns(sb);
 	}
 
 	/**","Switched back to the default because I can't verify if this is a problem
currently.",conventional,
"diff --git a/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java b/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
+++ b/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
@@ -135,7 +135,8 @@ public class SqlServerDatabaseType extends BaseDatabaseType {
 
 	@Override
 	public void appendInsertNoColumns(StringBuilder sb) {
-		sb.append(""DEFAULT VALUES"");
+		// may be: sb.append(""DEFAULT VALUES"");
+		super.appendInsertNoColumns(sb);
 	}
 
 	/**","Switched back to the default because I can't verify if this is a problem
currently.",imperative,
"diff --git a/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java b/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
+++ b/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
@@ -135,7 +135,8 @@ public class SqlServerDatabaseType extends BaseDatabaseType {
 
 	@Override
 	public void appendInsertNoColumns(StringBuilder sb) {
-		sb.append(""DEFAULT VALUES"");
+		// may be: sb.append(""DEFAULT VALUES"");
+		super.appendInsertNoColumns(sb);
 	}
 
 	/**","Switched back to the default because I can't verify if this is a problem
currently.",minimal,
"diff --git a/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java b/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
+++ b/src/main/java/com/j256/ormlite/db/SqlServerDatabaseType.java
@@ -135,7 +135,8 @@ public class SqlServerDatabaseType extends BaseDatabaseType {
 
 	@Override
 	public void appendInsertNoColumns(StringBuilder sb) {
-		sb.append(""DEFAULT VALUES"");
+		// may be: sb.append(""DEFAULT VALUES"");
+		super.appendInsertNoColumns(sb);
 	}
 
 	/**","Switched back to the default because I can't verify if this is a problem
currently.",detailed,
"diff --git a/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java b/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
index <HASH>..<HASH> 100644
--- a/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
+++ b/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
@@ -146,7 +146,7 @@ public class ChangeFactory {
         }
 
         try {
-            return classes.iterator().next().getConstructor().newInstance();
+            return classes.iterator().next().getConstructor().getConstructor().newInstance();
         } catch (Exception e) {
             throw new UnexpectedLiquibaseException(e);
         }","Call Class.getConstructor.newInstance instead of newInstance

(cherry picked from commit <I>bfcf<I>f<I>e<I>a<I>cb<I>f6c<I>e8db4e)",zero_shot,
"diff --git a/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java b/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
index <HASH>..<HASH> 100644
--- a/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
+++ b/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
@@ -146,7 +146,7 @@ public class ChangeFactory {
         }
 
         try {
-            return classes.iterator().next().getConstructor().newInstance();
+            return classes.iterator().next().getConstructor().getConstructor().newInstance();
         } catch (Exception e) {
             throw new UnexpectedLiquibaseException(e);
         }","Call Class.getConstructor.newInstance instead of newInstance

(cherry picked from commit <I>bfcf<I>f<I>e<I>a<I>cb<I>f6c<I>e8db4e)",conventional,
"diff --git a/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java b/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
index <HASH>..<HASH> 100644
--- a/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
+++ b/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
@@ -146,7 +146,7 @@ public class ChangeFactory {
         }
 
         try {
-            return classes.iterator().next().getConstructor().newInstance();
+            return classes.iterator().next().getConstructor().getConstructor().newInstance();
         } catch (Exception e) {
             throw new UnexpectedLiquibaseException(e);
         }","Call Class.getConstructor.newInstance instead of newInstance

(cherry picked from commit <I>bfcf<I>f<I>e<I>a<I>cb<I>f6c<I>e8db4e)",imperative,
"diff --git a/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java b/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
index <HASH>..<HASH> 100644
--- a/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
+++ b/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
@@ -146,7 +146,7 @@ public class ChangeFactory {
         }
 
         try {
-            return classes.iterator().next().getConstructor().newInstance();
+            return classes.iterator().next().getConstructor().getConstructor().newInstance();
         } catch (Exception e) {
             throw new UnexpectedLiquibaseException(e);
         }","Call Class.getConstructor.newInstance instead of newInstance

(cherry picked from commit <I>bfcf<I>f<I>e<I>a<I>cb<I>f6c<I>e8db4e)",minimal,
"diff --git a/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java b/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
index <HASH>..<HASH> 100644
--- a/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
+++ b/liquibase-core/src/main/java/liquibase/change/ChangeFactory.java
@@ -146,7 +146,7 @@ public class ChangeFactory {
         }
 
         try {
-            return classes.iterator().next().getConstructor().newInstance();
+            return classes.iterator().next().getConstructor().getConstructor().newInstance();
         } catch (Exception e) {
             throw new UnexpectedLiquibaseException(e);
         }","Call Class.getConstructor.newInstance instead of newInstance

(cherry picked from commit <I>bfcf<I>f<I>e<I>a<I>cb<I>f6c<I>e8db4e)",detailed,
"diff --git a/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java b/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
index <HASH>..<HASH> 100644
--- a/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
+++ b/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
@@ -36,7 +36,7 @@ public class Word2VecModel extends Model<Word2VecModel, Word2VecParameters, Word
   }
 
   @Override
-  public ModelMojoWriter getMojo() {
+  public Word2VecMojoWriter getMojo() {
     return new Word2VecMojoWriter(this);
   }","word2vec, fix MOJO writer - it needs to return a concrete implementation",zero_shot,
"diff --git a/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java b/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
index <HASH>..<HASH> 100644
--- a/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
+++ b/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
@@ -36,7 +36,7 @@ public class Word2VecModel extends Model<Word2VecModel, Word2VecParameters, Word
   }
 
   @Override
-  public ModelMojoWriter getMojo() {
+  public Word2VecMojoWriter getMojo() {
     return new Word2VecMojoWriter(this);
   }","word2vec, fix MOJO writer - it needs to return a concrete implementation",conventional,
"diff --git a/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java b/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
index <HASH>..<HASH> 100644
--- a/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
+++ b/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
@@ -36,7 +36,7 @@ public class Word2VecModel extends Model<Word2VecModel, Word2VecParameters, Word
   }
 
   @Override
-  public ModelMojoWriter getMojo() {
+  public Word2VecMojoWriter getMojo() {
     return new Word2VecMojoWriter(this);
   }","word2vec, fix MOJO writer - it needs to return a concrete implementation",imperative,
"diff --git a/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java b/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
index <HASH>..<HASH> 100644
--- a/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
+++ b/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
@@ -36,7 +36,7 @@ public class Word2VecModel extends Model<Word2VecModel, Word2VecParameters, Word
   }
 
   @Override
-  public ModelMojoWriter getMojo() {
+  public Word2VecMojoWriter getMojo() {
     return new Word2VecMojoWriter(this);
   }","word2vec, fix MOJO writer - it needs to return a concrete implementation",minimal,
"diff --git a/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java b/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
index <HASH>..<HASH> 100644
--- a/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
+++ b/h2o-algos/src/main/java/hex/word2vec/Word2VecModel.java
@@ -36,7 +36,7 @@ public class Word2VecModel extends Model<Word2VecModel, Word2VecParameters, Word
   }
 
   @Override
-  public ModelMojoWriter getMojo() {
+  public Word2VecMojoWriter getMojo() {
     return new Word2VecMojoWriter(this);
   }","word2vec, fix MOJO writer - it needs to return a concrete implementation",detailed,
"diff --git a/src/frontend/org/voltdb/RealVoltDB.java b/src/frontend/org/voltdb/RealVoltDB.java
index <HASH>..<HASH> 100644
--- a/src/frontend/org/voltdb/RealVoltDB.java
+++ b/src/frontend/org/voltdb/RealVoltDB.java
@@ -1145,7 +1145,7 @@ public class RealVoltDB implements VoltDBInterface, RestoreAgent.Callback
         String buildInfo[] = extractBuildInfo();
         m_versionString = buildInfo[0];
         m_buildString = buildInfo[1];
-        hostLog.info(String.format(""Build: %s %s %s"", m_versionString, m_buildString, editionTag));
+        consoleLog.info(String.format(""Build: %s %s %s"", m_versionString, m_buildString, editionTag));
     }
 
     /**",ENG-<I> Add buildstring to console output.,zero_shot,
"diff --git a/src/frontend/org/voltdb/RealVoltDB.java b/src/frontend/org/voltdb/RealVoltDB.java
index <HASH>..<HASH> 100644
--- a/src/frontend/org/voltdb/RealVoltDB.java
+++ b/src/frontend/org/voltdb/RealVoltDB.java
@@ -1145,7 +1145,7 @@ public class RealVoltDB implements VoltDBInterface, RestoreAgent.Callback
         String buildInfo[] = extractBuildInfo();
         m_versionString = buildInfo[0];
         m_buildString = buildInfo[1];
-        hostLog.info(String.format(""Build: %s %s %s"", m_versionString, m_buildString, editionTag));
+        consoleLog.info(String.format(""Build: %s %s %s"", m_versionString, m_buildString, editionTag));
     }
 
     /**",ENG-<I> Add buildstring to console output.,conventional,
"diff --git a/src/frontend/org/voltdb/RealVoltDB.java b/src/frontend/org/voltdb/RealVoltDB.java
index <HASH>..<HASH> 100644
--- a/src/frontend/org/voltdb/RealVoltDB.java
+++ b/src/frontend/org/voltdb/RealVoltDB.java
@@ -1145,7 +1145,7 @@ public class RealVoltDB implements VoltDBInterface, RestoreAgent.Callback
         String buildInfo[] = extractBuildInfo();
         m_versionString = buildInfo[0];
         m_buildString = buildInfo[1];
-        hostLog.info(String.format(""Build: %s %s %s"", m_versionString, m_buildString, editionTag));
+        consoleLog.info(String.format(""Build: %s %s %s"", m_versionString, m_buildString, editionTag));
     }
 
     /**",ENG-<I> Add buildstring to console output.,imperative,Use consoleLog instead of hostLog for build information.
"diff --git a/src/frontend/org/voltdb/RealVoltDB.java b/src/frontend/org/voltdb/RealVoltDB.java
index <HASH>..<HASH> 100644
--- a/src/frontend/org/voltdb/RealVoltDB.java
+++ b/src/frontend/org/voltdb/RealVoltDB.java
@@ -1145,7 +1145,7 @@ public class RealVoltDB implements VoltDBInterface, RestoreAgent.Callback
         String buildInfo[] = extractBuildInfo();
         m_versionString = buildInfo[0];
         m_buildString = buildInfo[1];
-        hostLog.info(String.format(""Build: %s %s %s"", m_versionString, m_buildString, editionTag));
+        consoleLog.info(String.format(""Build: %s %s %s"", m_versionString, m_buildString, editionTag));
     }
 
     /**",ENG-<I> Add buildstring to console output.,minimal,"Log build info to console logger

The host logger is not initialized at the time the build info is logged, so log to the console logger instead."
"diff --git a/src/frontend/org/voltdb/RealVoltDB.java b/src/frontend/org/voltdb/RealVoltDB.java
index <HASH>..<HASH> 100644
--- a/src/frontend/org/voltdb/RealVoltDB.java
+++ b/src/frontend/org/voltdb/RealVoltDB.java
@@ -1145,7 +1145,7 @@ public class RealVoltDB implements VoltDBInterface, RestoreAgent.Callback
         String buildInfo[] = extractBuildInfo();
         m_versionString = buildInfo[0];
         m_buildString = buildInfo[1];
-        hostLog.info(String.format(""Build: %s %s %s"", m_versionString, m_buildString, editionTag));
+        consoleLog.info(String.format(""Build: %s %s %s"", m_versionString, m_buildString, editionTag));
     }
 
     /**",ENG-<I> Add buildstring to console output.,detailed,"Fix: Use consoleLog for build info message

The build information message, which includes the version, build string, and edition tag, was previously being logged to the hostLog. This commit changes the logging destination to consoleLog. This ensures that the build information is consistently displayed in the console output, which is more appropriate for this type of startup information."
"diff --git a/src/main/java/dtest/actions/ExecuteRegex.java b/src/main/java/dtest/actions/ExecuteRegex.java
index <HASH>..<HASH> 100644
--- a/src/main/java/dtest/actions/ExecuteRegex.java
+++ b/src/main/java/dtest/actions/ExecuteRegex.java
@@ -37,6 +37,8 @@ public class ExecuteRegex extends TestAction {
             for (int groupNumber = 0; groupNumber <= matcher.groupCount(); groupNumber++) {

                 this.writeOutput(String.format(""group%d"", groupNumber), matcher.group(groupNumber));

             }

+        } else {

+            throw new RuntimeException(""The regular expression didn't match the specified text."");

         }

     }

 }",fix(ExecuteRegex): properly handle failed match,zero_shot,Throw an exception if the regular expression doesn't match the specified text in the ExecuteRegex action.
"diff --git a/src/main/java/dtest/actions/ExecuteRegex.java b/src/main/java/dtest/actions/ExecuteRegex.java
index <HASH>..<HASH> 100644
--- a/src/main/java/dtest/actions/ExecuteRegex.java
+++ b/src/main/java/dtest/actions/ExecuteRegex.java
@@ -37,6 +37,8 @@ public class ExecuteRegex extends TestAction {
             for (int groupNumber = 0; groupNumber <= matcher.groupCount(); groupNumber++) {

                 this.writeOutput(String.format(""group%d"", groupNumber), matcher.group(groupNumber));

             }

+        } else {

+            throw new RuntimeException(""The regular expression didn't match the specified text."");

         }

     }

 }",fix(ExecuteRegex): properly handle failed match,conventional,"feat: Add error handling for regex matching failure

The code now throws an exception when the regular expression doesn't match the specified text."
"diff --git a/src/main/java/dtest/actions/ExecuteRegex.java b/src/main/java/dtest/actions/ExecuteRegex.java
index <HASH>..<HASH> 100644
--- a/src/main/java/dtest/actions/ExecuteRegex.java
+++ b/src/main/java/dtest/actions/ExecuteRegex.java
@@ -37,6 +37,8 @@ public class ExecuteRegex extends TestAction {
             for (int groupNumber = 0; groupNumber <= matcher.groupCount(); groupNumber++) {

                 this.writeOutput(String.format(""group%d"", groupNumber), matcher.group(groupNumber));

             }

+        } else {

+            throw new RuntimeException(""The regular expression didn't match the specified text."");

         }

     }

 }",fix(ExecuteRegex): properly handle failed match,imperative,Throw an exception if the regular expression doesn't match.
"diff --git a/src/main/java/dtest/actions/ExecuteRegex.java b/src/main/java/dtest/actions/ExecuteRegex.java
index <HASH>..<HASH> 100644
--- a/src/main/java/dtest/actions/ExecuteRegex.java
+++ b/src/main/java/dtest/actions/ExecuteRegex.java
@@ -37,6 +37,8 @@ public class ExecuteRegex extends TestAction {
             for (int groupNumber = 0; groupNumber <= matcher.groupCount(); groupNumber++) {

                 this.writeOutput(String.format(""group%d"", groupNumber), matcher.group(groupNumber));

             }

+        } else {

+            throw new RuntimeException(""The regular expression didn't match the specified text."");

         }

     }

 }",fix(ExecuteRegex): properly handle failed match,minimal,feat: Throw exception when regex doesn't match
"diff --git a/src/main/java/dtest/actions/ExecuteRegex.java b/src/main/java/dtest/actions/ExecuteRegex.java
index <HASH>..<HASH> 100644
--- a/src/main/java/dtest/actions/ExecuteRegex.java
+++ b/src/main/java/dtest/actions/ExecuteRegex.java
@@ -37,6 +37,8 @@ public class ExecuteRegex extends TestAction {
             for (int groupNumber = 0; groupNumber <= matcher.groupCount(); groupNumber++) {

                 this.writeOutput(String.format(""group%d"", groupNumber), matcher.group(groupNumber));

             }

+        } else {

+            throw new RuntimeException(""The regular expression didn't match the specified text."");

         }

     }

 }",fix(ExecuteRegex): properly handle failed match,detailed,"Fix: Throw exception when regex doesn't match

The previous implementation of the ExecuteRegex action did not handle cases where the provided regular expression failed to match the input text. This could lead to unexpected behavior and make it difficult to debug test failures.

This commit introduces a change to throw a RuntimeException when the regular expression doesn't match the specified text. This ensures that the test execution fails explicitly when a match is expected but not found, providing clearer error messages and simplifying the debugging process."
"diff --git a/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java b/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
+++ b/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
@@ -22,9 +22,9 @@
  */
 package com.semanticcms.autogit.servlet;
 
+import com.aoindustries.exception.WrappedException;
 import com.aoindustries.lang.ProcessResult;
 import com.aoindustries.lang.Strings;
-import com.aoindustries.util.WrappedException;
 import com.semanticcms.autogit.model.GitStatus;
 import com.semanticcms.autogit.model.State;
 import com.semanticcms.autogit.model.UncommittedChange;","Moved a few exceptions to the new com.aoindustries.exception package:

NotImplementedException
WrappedException
WrappedExceptions",zero_shot,Refactor: Move WrappedException to com.aoindustries.exception package.
"diff --git a/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java b/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
+++ b/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
@@ -22,9 +22,9 @@
  */
 package com.semanticcms.autogit.servlet;
 
+import com.aoindustries.exception.WrappedException;
 import com.aoindustries.lang.ProcessResult;
 import com.aoindustries.lang.Strings;
-import com.aoindustries.util.WrappedException;
 import com.semanticcms.autogit.model.GitStatus;
 import com.semanticcms.autogit.model.State;
 import com.semanticcms.autogit.model.UncommittedChange;","Moved a few exceptions to the new com.aoindustries.exception package:

NotImplementedException
WrappedException
WrappedExceptions",conventional,fix: replace aoindustries.util.WrappedException with aoindustries.exception.WrappedException
"diff --git a/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java b/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
+++ b/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
@@ -22,9 +22,9 @@
  */
 package com.semanticcms.autogit.servlet;
 
+import com.aoindustries.exception.WrappedException;
 import com.aoindustries.lang.ProcessResult;
 import com.aoindustries.lang.Strings;
-import com.aoindustries.util.WrappedException;
 import com.semanticcms.autogit.model.GitStatus;
 import com.semanticcms.autogit.model.State;
 import com.semanticcms.autogit.model.UncommittedChange;","Moved a few exceptions to the new com.aoindustries.exception package:

NotImplementedException
WrappedException
WrappedExceptions",imperative,Fix import for WrappedException.
"diff --git a/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java b/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
+++ b/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
@@ -22,9 +22,9 @@
  */
 package com.semanticcms.autogit.servlet;
 
+import com.aoindustries.exception.WrappedException;
 import com.aoindustries.lang.ProcessResult;
 import com.aoindustries.lang.Strings;
-import com.aoindustries.util.WrappedException;
 import com.semanticcms.autogit.model.GitStatus;
 import com.semanticcms.autogit.model.State;
 import com.semanticcms.autogit.model.UncommittedChange;","Moved a few exceptions to the new com.aoindustries.exception package:

NotImplementedException
WrappedException
WrappedExceptions",minimal,"Fix: Correct import for WrappedException

The import for WrappedException was incorrect. This commit fixes the import statement to point to the correct location."
"diff --git a/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java b/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
+++ b/src/main/java/com/semanticcms/autogit/servlet/AutoGit.java
@@ -22,9 +22,9 @@
  */
 package com.semanticcms.autogit.servlet;
 
+import com.aoindustries.exception.WrappedException;
 import com.aoindustries.lang.ProcessResult;
 import com.aoindustries.lang.Strings;
-import com.aoindustries.util.WrappedException;
 import com.semanticcms.autogit.model.GitStatus;
 import com.semanticcms.autogit.model.State;
 import com.semanticcms.autogit.model.UncommittedChange;","Moved a few exceptions to the new com.aoindustries.exception package:

NotImplementedException
WrappedException
WrappedExceptions",detailed,"Fix: Corrected import for WrappedException

The import statement for `WrappedException` was incorrect. It was importing from `com.aoindustries.util.WrappedException` which is not the correct location.

This commit corrects the import statement to `com.aoindustries.exception.WrappedException` to resolve compilation or runtime errors caused by the incorrect import."
"diff --git a/src/tuwien/auto/calimero/mgmt/Destination.java b/src/tuwien/auto/calimero/mgmt/Destination.java
index <HASH>..<HASH> 100644
--- a/src/tuwien/auto/calimero/mgmt/Destination.java
+++ b/src/tuwien/auto/calimero/mgmt/Destination.java
@@ -164,6 +164,10 @@ public class Destination
 		 */
 		public void run()
 		{
+			// with keep-alive we do not disconnect on timeout
+			if (d.alive)
+				return;
+
 			final int state = d.getState();
 			if (state != DISCONNECTED && state != DESTROYED)
 				try {",Add partial implementation of keep-alive to not disconnect on timeout,zero_shot,Fix: Prevent disconnecting from destinations with keep-alive enabled.
"diff --git a/src/tuwien/auto/calimero/mgmt/Destination.java b/src/tuwien/auto/calimero/mgmt/Destination.java
index <HASH>..<HASH> 100644
--- a/src/tuwien/auto/calimero/mgmt/Destination.java
+++ b/src/tuwien/auto/calimero/mgmt/Destination.java
@@ -164,6 +164,10 @@ public class Destination
 		 */
 		public void run()
 		{
+			// with keep-alive we do not disconnect on timeout
+			if (d.alive)
+				return;
+
 			final int state = d.getState();
 			if (state != DISCONNECTED && state != DESTROYED)
 				try {",Add partial implementation of keep-alive to not disconnect on timeout,conventional,fix: Avoid disconnect on keep-alive timeout
"diff --git a/src/tuwien/auto/calimero/mgmt/Destination.java b/src/tuwien/auto/calimero/mgmt/Destination.java
index <HASH>..<HASH> 100644
--- a/src/tuwien/auto/calimero/mgmt/Destination.java
+++ b/src/tuwien/auto/calimero/mgmt/Destination.java
@@ -164,6 +164,10 @@ public class Destination
 		 */
 		public void run()
 		{
+			// with keep-alive we do not disconnect on timeout
+			if (d.alive)
+				return;
+
 			final int state = d.getState();
 			if (state != DISCONNECTED && state != DESTROYED)
 				try {",Add partial implementation of keep-alive to not disconnect on timeout,imperative,Skip disconnect if destination is kept alive.
"diff --git a/src/tuwien/auto/calimero/mgmt/Destination.java b/src/tuwien/auto/calimero/mgmt/Destination.java
index <HASH>..<HASH> 100644
--- a/src/tuwien/auto/calimero/mgmt/Destination.java
+++ b/src/tuwien/auto/calimero/mgmt/Destination.java
@@ -164,6 +164,10 @@ public class Destination
 		 */
 		public void run()
 		{
+			// with keep-alive we do not disconnect on timeout
+			if (d.alive)
+				return;
+
 			final int state = d.getState();
 			if (state != DISCONNECTED && state != DESTROYED)
 				try {",Add partial implementation of keep-alive to not disconnect on timeout,minimal,
"diff --git a/src/tuwien/auto/calimero/mgmt/Destination.java b/src/tuwien/auto/calimero/mgmt/Destination.java
index <HASH>..<HASH> 100644
--- a/src/tuwien/auto/calimero/mgmt/Destination.java
+++ b/src/tuwien/auto/calimero/mgmt/Destination.java
@@ -164,6 +164,10 @@ public class Destination
 		 */
 		public void run()
 		{
+			// with keep-alive we do not disconnect on timeout
+			if (d.alive)
+				return;
+
 			final int state = d.getState();
 			if (state != DISCONNECTED && state != DESTROYED)
 				try {",Add partial implementation of keep-alive to not disconnect on timeout,detailed,
"diff --git a/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java b/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
index <HASH>..<HASH> 100644
--- a/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
+++ b/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
@@ -12,7 +12,7 @@ public class MemCachedStaticSet<T> extends MemCachedRef<Set<T>> implements Set<T
 {
 	protected final T[] array;
 
-	public MemCachedStaticSet(T[] array)
+	public MemCachedStaticSet(T...array)
 	{
 		this.array = array;
 	}",change MemCachedStaticSet to take vargs instead of just an array,zero_shot,
"diff --git a/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java b/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
index <HASH>..<HASH> 100644
--- a/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
+++ b/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
@@ -12,7 +12,7 @@ public class MemCachedStaticSet<T> extends MemCachedRef<Set<T>> implements Set<T
 {
 	protected final T[] array;
 
-	public MemCachedStaticSet(T[] array)
+	public MemCachedStaticSet(T...array)
 	{
 		this.array = array;
 	}",change MemCachedStaticSet to take vargs instead of just an array,conventional,
"diff --git a/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java b/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
index <HASH>..<HASH> 100644
--- a/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
+++ b/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
@@ -12,7 +12,7 @@ public class MemCachedStaticSet<T> extends MemCachedRef<Set<T>> implements Set<T
 {
 	protected final T[] array;
 
-	public MemCachedStaticSet(T[] array)
+	public MemCachedStaticSet(T...array)
 	{
 		this.array = array;
 	}",change MemCachedStaticSet to take vargs instead of just an array,imperative,
"diff --git a/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java b/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
index <HASH>..<HASH> 100644
--- a/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
+++ b/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
@@ -12,7 +12,7 @@ public class MemCachedStaticSet<T> extends MemCachedRef<Set<T>> implements Set<T
 {
 	protected final T[] array;
 
-	public MemCachedStaticSet(T[] array)
+	public MemCachedStaticSet(T...array)
 	{
 		this.array = array;
 	}",change MemCachedStaticSet to take vargs instead of just an array,minimal,
"diff --git a/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java b/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
index <HASH>..<HASH> 100644
--- a/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
+++ b/alib/src/main/java/net/darkmist/alib/collection/MemCachedStaticSet.java
@@ -12,7 +12,7 @@ public class MemCachedStaticSet<T> extends MemCachedRef<Set<T>> implements Set<T
 {
 	protected final T[] array;
 
-	public MemCachedStaticSet(T[] array)
+	public MemCachedStaticSet(T...array)
 	{
 		this.array = array;
 	}",change MemCachedStaticSet to take vargs instead of just an array,detailed,
"diff --git a/src/main/java/com/github/susom/database/Schema.java b/src/main/java/com/github/susom/database/Schema.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/github/susom/database/Schema.java
+++ b/src/main/java/com/github/susom/database/Schema.java
@@ -844,7 +844,11 @@ public class Schema {
     for (Table table : tables) {
       for (Index index : table.indexes) {
         Sql sql = new Sql();
-        sql.append(""create index "");
+        sql.append(""create "");
+        if (index.unique) {
+          sql.append(""unique "");
+        }
+        sql.append(""index "");
         sql.append(index.name);
         sql.append("" on "");
         sql.append(table.name);",Actually create unique indexes when Index.unique() is called,zero_shot,
"diff --git a/src/main/java/com/github/susom/database/Schema.java b/src/main/java/com/github/susom/database/Schema.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/github/susom/database/Schema.java
+++ b/src/main/java/com/github/susom/database/Schema.java
@@ -844,7 +844,11 @@ public class Schema {
     for (Table table : tables) {
       for (Index index : table.indexes) {
         Sql sql = new Sql();
-        sql.append(""create index "");
+        sql.append(""create "");
+        if (index.unique) {
+          sql.append(""unique "");
+        }
+        sql.append(""index "");
         sql.append(index.name);
         sql.append("" on "");
         sql.append(table.name);",Actually create unique indexes when Index.unique() is called,conventional,
"diff --git a/src/main/java/com/github/susom/database/Schema.java b/src/main/java/com/github/susom/database/Schema.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/github/susom/database/Schema.java
+++ b/src/main/java/com/github/susom/database/Schema.java
@@ -844,7 +844,11 @@ public class Schema {
     for (Table table : tables) {
       for (Index index : table.indexes) {
         Sql sql = new Sql();
-        sql.append(""create index "");
+        sql.append(""create "");
+        if (index.unique) {
+          sql.append(""unique "");
+        }
+        sql.append(""index "");
         sql.append(index.name);
         sql.append("" on "");
         sql.append(table.name);",Actually create unique indexes when Index.unique() is called,imperative,
"diff --git a/src/main/java/com/github/susom/database/Schema.java b/src/main/java/com/github/susom/database/Schema.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/github/susom/database/Schema.java
+++ b/src/main/java/com/github/susom/database/Schema.java
@@ -844,7 +844,11 @@ public class Schema {
     for (Table table : tables) {
       for (Index index : table.indexes) {
         Sql sql = new Sql();
-        sql.append(""create index "");
+        sql.append(""create "");
+        if (index.unique) {
+          sql.append(""unique "");
+        }
+        sql.append(""index "");
         sql.append(index.name);
         sql.append("" on "");
         sql.append(table.name);",Actually create unique indexes when Index.unique() is called,minimal,
"diff --git a/src/main/java/com/github/susom/database/Schema.java b/src/main/java/com/github/susom/database/Schema.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/github/susom/database/Schema.java
+++ b/src/main/java/com/github/susom/database/Schema.java
@@ -844,7 +844,11 @@ public class Schema {
     for (Table table : tables) {
       for (Index index : table.indexes) {
         Sql sql = new Sql();
-        sql.append(""create index "");
+        sql.append(""create "");
+        if (index.unique) {
+          sql.append(""unique "");
+        }
+        sql.append(""index "");
         sql.append(index.name);
         sql.append("" on "");
         sql.append(table.name);",Actually create unique indexes when Index.unique() is called,detailed,
"diff --git a/src/java/azkaban/executor/ExecutableFlow.java b/src/java/azkaban/executor/ExecutableFlow.java
index <HASH>..<HASH> 100644
--- a/src/java/azkaban/executor/ExecutableFlow.java
+++ b/src/java/azkaban/executor/ExecutableFlow.java
@@ -89,7 +89,8 @@ public class ExecutableFlow extends ExecutableFlowBase {
 	protected void setFlow(Project project, Flow flow) {
 		super.setFlow(project, flow);
 		executionOptions = new ExecutionOptions();
-
+		executionOptions.setMailCreator(flow.getMailCreator());
+		
 		if (flow.getSuccessEmails() != null) {
 			executionOptions.setSuccessEmails(flow.getSuccessEmails());
 		}",Fixed bug in ExecutableFlow where we were not setting the MailCreator (which messed up Reportal reports),zero_shot,
"diff --git a/src/java/azkaban/executor/ExecutableFlow.java b/src/java/azkaban/executor/ExecutableFlow.java
index <HASH>..<HASH> 100644
--- a/src/java/azkaban/executor/ExecutableFlow.java
+++ b/src/java/azkaban/executor/ExecutableFlow.java
@@ -89,7 +89,8 @@ public class ExecutableFlow extends ExecutableFlowBase {
 	protected void setFlow(Project project, Flow flow) {
 		super.setFlow(project, flow);
 		executionOptions = new ExecutionOptions();
-
+		executionOptions.setMailCreator(flow.getMailCreator());
+		
 		if (flow.getSuccessEmails() != null) {
 			executionOptions.setSuccessEmails(flow.getSuccessEmails());
 		}",Fixed bug in ExecutableFlow where we were not setting the MailCreator (which messed up Reportal reports),conventional,
"diff --git a/src/java/azkaban/executor/ExecutableFlow.java b/src/java/azkaban/executor/ExecutableFlow.java
index <HASH>..<HASH> 100644
--- a/src/java/azkaban/executor/ExecutableFlow.java
+++ b/src/java/azkaban/executor/ExecutableFlow.java
@@ -89,7 +89,8 @@ public class ExecutableFlow extends ExecutableFlowBase {
 	protected void setFlow(Project project, Flow flow) {
 		super.setFlow(project, flow);
 		executionOptions = new ExecutionOptions();
-
+		executionOptions.setMailCreator(flow.getMailCreator());
+		
 		if (flow.getSuccessEmails() != null) {
 			executionOptions.setSuccessEmails(flow.getSuccessEmails());
 		}",Fixed bug in ExecutableFlow where we were not setting the MailCreator (which messed up Reportal reports),imperative,
"diff --git a/src/java/azkaban/executor/ExecutableFlow.java b/src/java/azkaban/executor/ExecutableFlow.java
index <HASH>..<HASH> 100644
--- a/src/java/azkaban/executor/ExecutableFlow.java
+++ b/src/java/azkaban/executor/ExecutableFlow.java
@@ -89,7 +89,8 @@ public class ExecutableFlow extends ExecutableFlowBase {
 	protected void setFlow(Project project, Flow flow) {
 		super.setFlow(project, flow);
 		executionOptions = new ExecutionOptions();
-
+		executionOptions.setMailCreator(flow.getMailCreator());
+		
 		if (flow.getSuccessEmails() != null) {
 			executionOptions.setSuccessEmails(flow.getSuccessEmails());
 		}",Fixed bug in ExecutableFlow where we were not setting the MailCreator (which messed up Reportal reports),minimal,
"diff --git a/src/java/azkaban/executor/ExecutableFlow.java b/src/java/azkaban/executor/ExecutableFlow.java
index <HASH>..<HASH> 100644
--- a/src/java/azkaban/executor/ExecutableFlow.java
+++ b/src/java/azkaban/executor/ExecutableFlow.java
@@ -89,7 +89,8 @@ public class ExecutableFlow extends ExecutableFlowBase {
 	protected void setFlow(Project project, Flow flow) {
 		super.setFlow(project, flow);
 		executionOptions = new ExecutionOptions();
-
+		executionOptions.setMailCreator(flow.getMailCreator());
+		
 		if (flow.getSuccessEmails() != null) {
 			executionOptions.setSuccessEmails(flow.getSuccessEmails());
 		}",Fixed bug in ExecutableFlow where we were not setting the MailCreator (which messed up Reportal reports),detailed,
"diff --git a/stats/src/main/java/io/airlift/stats/PauseMeter.java b/stats/src/main/java/io/airlift/stats/PauseMeter.java
index <HASH>..<HASH> 100644
--- a/stats/src/main/java/io/airlift/stats/PauseMeter.java
+++ b/stats/src/main/java/io/airlift/stats/PauseMeter.java
@@ -98,7 +98,7 @@ public class PauseMeter
 
                 long pauseNanos = delta - shortestObservableInterval;
                 synchronized (histogram) {
-                    histogram.recordValueWithExpectedInterval(pauseNanos, sleepNanos);
+                    histogram.recordValue(pauseNanos);
                     totalPauseNanos += pauseNanos;
                 }
             }","Don't compensate for ""lost"" measurements

It produces non-intuitive results when measuring actual
pauses.",zero_shot,
"diff --git a/stats/src/main/java/io/airlift/stats/PauseMeter.java b/stats/src/main/java/io/airlift/stats/PauseMeter.java
index <HASH>..<HASH> 100644
--- a/stats/src/main/java/io/airlift/stats/PauseMeter.java
+++ b/stats/src/main/java/io/airlift/stats/PauseMeter.java
@@ -98,7 +98,7 @@ public class PauseMeter
 
                 long pauseNanos = delta - shortestObservableInterval;
                 synchronized (histogram) {
-                    histogram.recordValueWithExpectedInterval(pauseNanos, sleepNanos);
+                    histogram.recordValue(pauseNanos);
                     totalPauseNanos += pauseNanos;
                 }
             }","Don't compensate for ""lost"" measurements

It produces non-intuitive results when measuring actual
pauses.",conventional,
"diff --git a/stats/src/main/java/io/airlift/stats/PauseMeter.java b/stats/src/main/java/io/airlift/stats/PauseMeter.java
index <HASH>..<HASH> 100644
--- a/stats/src/main/java/io/airlift/stats/PauseMeter.java
+++ b/stats/src/main/java/io/airlift/stats/PauseMeter.java
@@ -98,7 +98,7 @@ public class PauseMeter
 
                 long pauseNanos = delta - shortestObservableInterval;
                 synchronized (histogram) {
-                    histogram.recordValueWithExpectedInterval(pauseNanos, sleepNanos);
+                    histogram.recordValue(pauseNanos);
                     totalPauseNanos += pauseNanos;
                 }
             }","Don't compensate for ""lost"" measurements

It produces non-intuitive results when measuring actual
pauses.",imperative,
"diff --git a/stats/src/main/java/io/airlift/stats/PauseMeter.java b/stats/src/main/java/io/airlift/stats/PauseMeter.java
index <HASH>..<HASH> 100644
--- a/stats/src/main/java/io/airlift/stats/PauseMeter.java
+++ b/stats/src/main/java/io/airlift/stats/PauseMeter.java
@@ -98,7 +98,7 @@ public class PauseMeter
 
                 long pauseNanos = delta - shortestObservableInterval;
                 synchronized (histogram) {
-                    histogram.recordValueWithExpectedInterval(pauseNanos, sleepNanos);
+                    histogram.recordValue(pauseNanos);
                     totalPauseNanos += pauseNanos;
                 }
             }","Don't compensate for ""lost"" measurements

It produces non-intuitive results when measuring actual
pauses.",minimal,
"diff --git a/stats/src/main/java/io/airlift/stats/PauseMeter.java b/stats/src/main/java/io/airlift/stats/PauseMeter.java
index <HASH>..<HASH> 100644
--- a/stats/src/main/java/io/airlift/stats/PauseMeter.java
+++ b/stats/src/main/java/io/airlift/stats/PauseMeter.java
@@ -98,7 +98,7 @@ public class PauseMeter
 
                 long pauseNanos = delta - shortestObservableInterval;
                 synchronized (histogram) {
-                    histogram.recordValueWithExpectedInterval(pauseNanos, sleepNanos);
+                    histogram.recordValue(pauseNanos);
                     totalPauseNanos += pauseNanos;
                 }
             }","Don't compensate for ""lost"" measurements

It produces non-intuitive results when measuring actual
pauses.",detailed,
"diff --git a/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java b/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
index <HASH>..<HASH> 100644
--- a/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
+++ b/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
@@ -64,8 +64,6 @@ public class XmlSchemaParser
         throws Exception
     {
         final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-        factory.setXIncludeAware(true);
-        factory.setNamespaceAware(true);
 
         final String xsdFilename = System.getProperty(SbeTool.VALIDATION_XSD);
         if (xsdFilename != null)",Removed validation of xml namespaces and xinclude.,zero_shot,
"diff --git a/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java b/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
index <HASH>..<HASH> 100644
--- a/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
+++ b/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
@@ -64,8 +64,6 @@ public class XmlSchemaParser
         throws Exception
     {
         final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-        factory.setXIncludeAware(true);
-        factory.setNamespaceAware(true);
 
         final String xsdFilename = System.getProperty(SbeTool.VALIDATION_XSD);
         if (xsdFilename != null)",Removed validation of xml namespaces and xinclude.,conventional,
"diff --git a/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java b/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
index <HASH>..<HASH> 100644
--- a/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
+++ b/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
@@ -64,8 +64,6 @@ public class XmlSchemaParser
         throws Exception
     {
         final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-        factory.setXIncludeAware(true);
-        factory.setNamespaceAware(true);
 
         final String xsdFilename = System.getProperty(SbeTool.VALIDATION_XSD);
         if (xsdFilename != null)",Removed validation of xml namespaces and xinclude.,imperative,
"diff --git a/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java b/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
index <HASH>..<HASH> 100644
--- a/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
+++ b/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
@@ -64,8 +64,6 @@ public class XmlSchemaParser
         throws Exception
     {
         final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-        factory.setXIncludeAware(true);
-        factory.setNamespaceAware(true);
 
         final String xsdFilename = System.getProperty(SbeTool.VALIDATION_XSD);
         if (xsdFilename != null)",Removed validation of xml namespaces and xinclude.,minimal,
"diff --git a/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java b/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
index <HASH>..<HASH> 100644
--- a/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
+++ b/main/java/uk/co/real_logic/sbe/xml/XmlSchemaParser.java
@@ -64,8 +64,6 @@ public class XmlSchemaParser
         throws Exception
     {
         final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-        factory.setXIncludeAware(true);
-        factory.setNamespaceAware(true);
 
         final String xsdFilename = System.getProperty(SbeTool.VALIDATION_XSD);
         if (xsdFilename != null)",Removed validation of xml namespaces and xinclude.,detailed,
"diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
index <HASH>..<HASH> 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
@@ -300,7 +300,7 @@ public class KieBuilderImpl
         return getKieModule(false);
     }
 
-    KieModule getKieModuleIgnoringErrors() {
+    public KieModule getKieModuleIgnoringErrors() {
         return getKieModule(true);
     }",allow to get the KieModule from the InternalKieBuilder even if there are errors,zero_shot,
"diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
index <HASH>..<HASH> 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
@@ -300,7 +300,7 @@ public class KieBuilderImpl
         return getKieModule(false);
     }
 
-    KieModule getKieModuleIgnoringErrors() {
+    public KieModule getKieModuleIgnoringErrors() {
         return getKieModule(true);
     }",allow to get the KieModule from the InternalKieBuilder even if there are errors,conventional,
"diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
index <HASH>..<HASH> 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
@@ -300,7 +300,7 @@ public class KieBuilderImpl
         return getKieModule(false);
     }
 
-    KieModule getKieModuleIgnoringErrors() {
+    public KieModule getKieModuleIgnoringErrors() {
         return getKieModule(true);
     }",allow to get the KieModule from the InternalKieBuilder even if there are errors,imperative,
"diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
index <HASH>..<HASH> 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
@@ -300,7 +300,7 @@ public class KieBuilderImpl
         return getKieModule(false);
     }
 
-    KieModule getKieModuleIgnoringErrors() {
+    public KieModule getKieModuleIgnoringErrors() {
         return getKieModule(true);
     }",allow to get the KieModule from the InternalKieBuilder even if there are errors,minimal,
"diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
index <HASH>..<HASH> 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
@@ -300,7 +300,7 @@ public class KieBuilderImpl
         return getKieModule(false);
     }
 
-    KieModule getKieModuleIgnoringErrors() {
+    public KieModule getKieModuleIgnoringErrors() {
         return getKieModule(true);
     }",allow to get the KieModule from the InternalKieBuilder even if there are errors,detailed,"Fix(kie-builder): Make `getKieModuleIgnoringErrors` public

This commit changes the visibility of the `getKieModuleIgnoringErrors` method in `KieBuilderImpl` from package-private to public. This allows external classes to access the method, which returns the KieModule without throwing errors during the build process. This can be useful in situations where it is desirable to obtain a potentially incomplete KieModule even if some errors were encountered during compilation."
"diff --git a/src-setup/org/opencms/setup/CmsAutoSetup.java b/src-setup/org/opencms/setup/CmsAutoSetup.java
index <HASH>..<HASH> 100644
--- a/src-setup/org/opencms/setup/CmsAutoSetup.java
+++ b/src-setup/org/opencms/setup/CmsAutoSetup.java
@@ -111,6 +111,7 @@ public class CmsAutoSetup {
                 System.out.println(e.getMessage());

                 System.out.println(""Please have a look into the opencms log file for detailed information."");

                 LOG.error(e.getMessage(), e);

+                System.exit(1);

             }

         } else {

             System.out.println("""");","Changed return code to 1 for the case where errors happen during
auto-setup.",zero_shot,Fail the auto setup if an exception occurs to prevent a broken OpenCms instance.
"diff --git a/src-setup/org/opencms/setup/CmsAutoSetup.java b/src-setup/org/opencms/setup/CmsAutoSetup.java
index <HASH>..<HASH> 100644
--- a/src-setup/org/opencms/setup/CmsAutoSetup.java
+++ b/src-setup/org/opencms/setup/CmsAutoSetup.java
@@ -111,6 +111,7 @@ public class CmsAutoSetup {
                 System.out.println(e.getMessage());

                 System.out.println(""Please have a look into the opencms log file for detailed information."");

                 LOG.error(e.getMessage(), e);

+                System.exit(1);

             }

         } else {

             System.out.println("""");","Changed return code to 1 for the case where errors happen during
auto-setup.",conventional,fix: Exit with error code on setup failure
"diff --git a/src-setup/org/opencms/setup/CmsAutoSetup.java b/src-setup/org/opencms/setup/CmsAutoSetup.java
index <HASH>..<HASH> 100644
--- a/src-setup/org/opencms/setup/CmsAutoSetup.java
+++ b/src-setup/org/opencms/setup/CmsAutoSetup.java
@@ -111,6 +111,7 @@ public class CmsAutoSetup {
                 System.out.println(e.getMessage());

                 System.out.println(""Please have a look into the opencms log file for detailed information."");

                 LOG.error(e.getMessage(), e);

+                System.exit(1);

             }

         } else {

             System.out.println("""");","Changed return code to 1 for the case where errors happen during
auto-setup.",imperative,Exit with error code 1 on setup failure.
"diff --git a/src-setup/org/opencms/setup/CmsAutoSetup.java b/src-setup/org/opencms/setup/CmsAutoSetup.java
index <HASH>..<HASH> 100644
--- a/src-setup/org/opencms/setup/CmsAutoSetup.java
+++ b/src-setup/org/opencms/setup/CmsAutoSetup.java
@@ -111,6 +111,7 @@ public class CmsAutoSetup {
                 System.out.println(e.getMessage());

                 System.out.println(""Please have a look into the opencms log file for detailed information."");

                 LOG.error(e.getMessage(), e);

+                System.exit(1);

             }

         } else {

             System.out.println("""");","Changed return code to 1 for the case where errors happen during
auto-setup.",minimal,Exit on setup error
"diff --git a/src-setup/org/opencms/setup/CmsAutoSetup.java b/src-setup/org/opencms/setup/CmsAutoSetup.java
index <HASH>..<HASH> 100644
--- a/src-setup/org/opencms/setup/CmsAutoSetup.java
+++ b/src-setup/org/opencms/setup/CmsAutoSetup.java
@@ -111,6 +111,7 @@ public class CmsAutoSetup {
                 System.out.println(e.getMessage());

                 System.out.println(""Please have a look into the opencms log file for detailed information."");

                 LOG.error(e.getMessage(), e);

+                System.exit(1);

             }

         } else {

             System.out.println("""");","Changed return code to 1 for the case where errors happen during
auto-setup.",detailed,"Fix: Exit auto-setup on error

This commit introduces a critical fix to the auto-setup process. Previously, when an error occurred during the auto-setup, the process would log the error and continue. This could lead to an incomplete or corrupted installation, with potentially unpredictable behavior.

The change adds a `System.exit(1)` call within the `catch` block that handles exceptions during the `runSetup` method call. This ensures that the auto-setup process terminates immediately upon encountering an error. This prevents further execution with a potentially broken configuration and signals to any calling scripts or processes that the setup failed.

By exiting on error, we guarantee that only successful auto-setup runs are considered valid, improving the overall reliability and robustness of the system."
"diff --git a/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java b/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
index <HASH>..<HASH> 100755
--- a/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
+++ b/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
@@ -224,7 +224,7 @@ public class EventRecodingLogger implements Logger {
     }
 
     public void warn(Marker marker, String format, Object arg) {
-        recordEvent(Level.WARN, format, new Object[] { arg }, null);
+        recordEvent(Level.WARN, marker, format, new Object[] { arg }, null);
     }
 
     public void warn(Marker marker, String format, Object arg1, Object arg2) {",SLF4j-<I>: add missing marker in one of the warn methods,zero_shot,Fix: Pass marker to recordEvent in warn methods of EventRecodingLogger.
"diff --git a/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java b/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
index <HASH>..<HASH> 100755
--- a/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
+++ b/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
@@ -224,7 +224,7 @@ public class EventRecodingLogger implements Logger {
     }
 
     public void warn(Marker marker, String format, Object arg) {
-        recordEvent(Level.WARN, format, new Object[] { arg }, null);
+        recordEvent(Level.WARN, marker, format, new Object[] { arg }, null);
     }
 
     public void warn(Marker marker, String format, Object arg1, Object arg2) {",SLF4j-<I>: add missing marker in one of the warn methods,conventional,"fix: Correct method call in EventRecodingLogger.warn with marker

The `recordEvent` method in `EventRecodingLogger.warn(Marker, String, Object)` was called incorrectly, omitting the marker. This commit fixes the call to include the marker."
"diff --git a/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java b/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
index <HASH>..<HASH> 100755
--- a/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
+++ b/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
@@ -224,7 +224,7 @@ public class EventRecodingLogger implements Logger {
     }
 
     public void warn(Marker marker, String format, Object arg) {
-        recordEvent(Level.WARN, format, new Object[] { arg }, null);
+        recordEvent(Level.WARN, marker, format, new Object[] { arg }, null);
     }
 
     public void warn(Marker marker, String format, Object arg1, Object arg2) {",SLF4j-<I>: add missing marker in one of the warn methods,imperative,"Record marker for warn methods in EventRecodingLogger

The EventRecodingLogger.warn methods were missing the marker.
This commit adds the marker to the recordEvent call."
"diff --git a/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java b/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
index <HASH>..<HASH> 100755
--- a/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
+++ b/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
@@ -224,7 +224,7 @@ public class EventRecodingLogger implements Logger {
     }
 
     public void warn(Marker marker, String format, Object arg) {
-        recordEvent(Level.WARN, format, new Object[] { arg }, null);
+        recordEvent(Level.WARN, marker, format, new Object[] { arg }, null);
     }
 
     public void warn(Marker marker, String format, Object arg1, Object arg2) {",SLF4j-<I>: add missing marker in one of the warn methods,minimal,Fix: Pass marker to recordEvent in EventRecodingLogger.warn
"diff --git a/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java b/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
index <HASH>..<HASH> 100755
--- a/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
+++ b/slf4j-api/src/main/java/org/slf4j/event/EventRecodingLogger.java
@@ -224,7 +224,7 @@ public class EventRecodingLogger implements Logger {
     }
 
     public void warn(Marker marker, String format, Object arg) {
-        recordEvent(Level.WARN, format, new Object[] { arg }, null);
+        recordEvent(Level.WARN, marker, format, new Object[] { arg }, null);
     }
 
     public void warn(Marker marker, String format, Object arg1, Object arg2) {",SLF4j-<I>: add missing marker in one of the warn methods,detailed,"Fix: Pass marker to recordEvent in EventRecodingLogger warn methods

The `EventRecodingLogger` class's `warn` methods, which accept a `Marker` argument, were not correctly passing the `Marker` to the underlying `recordEvent` method. This resulted in the marker information being lost when recording the event.

This commit fixes the issue by ensuring that the `Marker` argument is correctly passed to the `recordEvent` method in the relevant `warn` method overloads. This ensures that marker information is preserved when recording warning events."
"diff --git a/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java b/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
index <HASH>..<HASH> 100644
--- a/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
+++ b/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
@@ -35,6 +35,8 @@ import org.openqa.selenium.remote.CapabilityType;
  */
 public class OptionsWithArguments extends MutableCapabilities {
 
+    private static final long serialVersionUID = -5948442823984189597L;
+
     private String capability;
 
     private List<String> args = new ArrayList<>();",Include generated serial uid in options class,zero_shot,Add serialVersionUID to OptionsWithArguments class for serialization.
"diff --git a/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java b/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
index <HASH>..<HASH> 100644
--- a/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
+++ b/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
@@ -35,6 +35,8 @@ import org.openqa.selenium.remote.CapabilityType;
  */
 public class OptionsWithArguments extends MutableCapabilities {
 
+    private static final long serialVersionUID = -5948442823984189597L;
+
     private String capability;
 
     private List<String> args = new ArrayList<>();",Include generated serial uid in options class,conventional,"fix: add serialVersionUID to OptionsWithArguments class

The `OptionsWithArguments` class implements the `Serializable` interface, but it's missing the `serialVersionUID` field. This commit adds the missing field to avoid potential `InvalidClassException` during deserialization."
"diff --git a/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java b/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
index <HASH>..<HASH> 100644
--- a/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
+++ b/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
@@ -35,6 +35,8 @@ import org.openqa.selenium.remote.CapabilityType;
  */
 public class OptionsWithArguments extends MutableCapabilities {
 
+    private static final long serialVersionUID = -5948442823984189597L;
+
     private String capability;
 
     private List<String> args = new ArrayList<>();",Include generated serial uid in options class,imperative,Add serialVersionUID to OptionsWithArguments class.
"diff --git a/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java b/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
index <HASH>..<HASH> 100644
--- a/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
+++ b/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
@@ -35,6 +35,8 @@ import org.openqa.selenium.remote.CapabilityType;
  */
 public class OptionsWithArguments extends MutableCapabilities {
 
+    private static final long serialVersionUID = -5948442823984189597L;
+
     private String capability;
 
     private List<String> args = new ArrayList<>();",Include generated serial uid in options class,minimal,"feat: add serialVersionUID to OptionsWithArguments

This commit adds a serialVersionUID to the OptionsWithArguments class to ensure serialization compatibility."
"diff --git a/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java b/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
index <HASH>..<HASH> 100644
--- a/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
+++ b/src/main/java/io/github/bonigarcia/wdm/webdriver/OptionsWithArguments.java
@@ -35,6 +35,8 @@ import org.openqa.selenium.remote.CapabilityType;
  */
 public class OptionsWithArguments extends MutableCapabilities {
 
+    private static final long serialVersionUID = -5948442823984189597L;
+
     private String capability;
 
     private List<String> args = new ArrayList<>();",Include generated serial uid in options class,detailed,"Fix: Add serialVersionUID to OptionsWithArguments class

This commit adds a `serialVersionUID` to the `OptionsWithArguments` class. This is necessary because the class implements the `Serializable` interface (indirectly through `MutableCapabilities`).

Adding a `serialVersionUID` ensures that the class can be serialized and deserialized correctly, even if the class definition changes in the future.  This prevents potential `InvalidClassException` errors during deserialization. The value was generated using a standard IDE tool."
"diff --git a/core/src/main/java/cucumber/api/DataTable.java b/core/src/main/java/cucumber/api/DataTable.java
index <HASH>..<HASH> 100644
--- a/core/src/main/java/cucumber/api/DataTable.java
+++ b/core/src/main/java/cucumber/api/DataTable.java
@@ -143,7 +143,7 @@ public class DataTable {
      * @param other the other table to diff with.
      * @throws TableDiffException if the tables are different.
      */
-    void diff(DataTable other) throws TableDiffException {
+    public void diff(DataTable other) throws TableDiffException {
         new TableDiffer(this, other).calculateDiffs();
     }",Restore ability to diff with another DataTable,zero_shot,
"diff --git a/core/src/main/java/cucumber/api/DataTable.java b/core/src/main/java/cucumber/api/DataTable.java
index <HASH>..<HASH> 100644
--- a/core/src/main/java/cucumber/api/DataTable.java
+++ b/core/src/main/java/cucumber/api/DataTable.java
@@ -143,7 +143,7 @@ public class DataTable {
      * @param other the other table to diff with.
      * @throws TableDiffException if the tables are different.
      */
-    void diff(DataTable other) throws TableDiffException {
+    public void diff(DataTable other) throws TableDiffException {
         new TableDiffer(this, other).calculateDiffs();
     }",Restore ability to diff with another DataTable,conventional,
"diff --git a/core/src/main/java/cucumber/api/DataTable.java b/core/src/main/java/cucumber/api/DataTable.java
index <HASH>..<HASH> 100644
--- a/core/src/main/java/cucumber/api/DataTable.java
+++ b/core/src/main/java/cucumber/api/DataTable.java
@@ -143,7 +143,7 @@ public class DataTable {
      * @param other the other table to diff with.
      * @throws TableDiffException if the tables are different.
      */
-    void diff(DataTable other) throws TableDiffException {
+    public void diff(DataTable other) throws TableDiffException {
         new TableDiffer(this, other).calculateDiffs();
     }",Restore ability to diff with another DataTable,imperative,
"diff --git a/core/src/main/java/cucumber/api/DataTable.java b/core/src/main/java/cucumber/api/DataTable.java
index <HASH>..<HASH> 100644
--- a/core/src/main/java/cucumber/api/DataTable.java
+++ b/core/src/main/java/cucumber/api/DataTable.java
@@ -143,7 +143,7 @@ public class DataTable {
      * @param other the other table to diff with.
      * @throws TableDiffException if the tables are different.
      */
-    void diff(DataTable other) throws TableDiffException {
+    public void diff(DataTable other) throws TableDiffException {
         new TableDiffer(this, other).calculateDiffs();
     }",Restore ability to diff with another DataTable,minimal,
"diff --git a/core/src/main/java/cucumber/api/DataTable.java b/core/src/main/java/cucumber/api/DataTable.java
index <HASH>..<HASH> 100644
--- a/core/src/main/java/cucumber/api/DataTable.java
+++ b/core/src/main/java/cucumber/api/DataTable.java
@@ -143,7 +143,7 @@ public class DataTable {
      * @param other the other table to diff with.
      * @throws TableDiffException if the tables are different.
      */
-    void diff(DataTable other) throws TableDiffException {
+    public void diff(DataTable other) throws TableDiffException {
         new TableDiffer(this, other).calculateDiffs();
     }",Restore ability to diff with another DataTable,detailed,
"diff --git a/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java b/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
index <HASH>..<HASH> 100644
--- a/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
+++ b/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
@@ -62,6 +62,7 @@ abstract class ApplicationServiceSupport<T extends IInterface> implements Servic
    * Destroy the service connection.

    */

   public void unbind() {

+    if (serviceObject == null) { return; }

     serviceObject = null;

     final Context context = contextRef.get();

     if (DEBUG) { Log.v(TAG, ""Unbind "" + context); }",do not unbind if we do not have a connection object,zero_shot,
"diff --git a/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java b/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
index <HASH>..<HASH> 100644
--- a/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
+++ b/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
@@ -62,6 +62,7 @@ abstract class ApplicationServiceSupport<T extends IInterface> implements Servic
    * Destroy the service connection.

    */

   public void unbind() {

+    if (serviceObject == null) { return; }

     serviceObject = null;

     final Context context = contextRef.get();

     if (DEBUG) { Log.v(TAG, ""Unbind "" + context); }",do not unbind if we do not have a connection object,conventional,
"diff --git a/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java b/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
index <HASH>..<HASH> 100644
--- a/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
+++ b/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
@@ -62,6 +62,7 @@ abstract class ApplicationServiceSupport<T extends IInterface> implements Servic
    * Destroy the service connection.

    */

   public void unbind() {

+    if (serviceObject == null) { return; }

     serviceObject = null;

     final Context context = contextRef.get();

     if (DEBUG) { Log.v(TAG, ""Unbind "" + context); }",do not unbind if we do not have a connection object,imperative,
"diff --git a/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java b/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
index <HASH>..<HASH> 100644
--- a/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
+++ b/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
@@ -62,6 +62,7 @@ abstract class ApplicationServiceSupport<T extends IInterface> implements Servic
    * Destroy the service connection.

    */

   public void unbind() {

+    if (serviceObject == null) { return; }

     serviceObject = null;

     final Context context = contextRef.get();

     if (DEBUG) { Log.v(TAG, ""Unbind "" + context); }",do not unbind if we do not have a connection object,minimal,
"diff --git a/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java b/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
index <HASH>..<HASH> 100644
--- a/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
+++ b/eclipse-project/src/com/stanfy/utils/ApplicationServiceSupport.java
@@ -62,6 +62,7 @@ abstract class ApplicationServiceSupport<T extends IInterface> implements Servic
    * Destroy the service connection.

    */

   public void unbind() {

+    if (serviceObject == null) { return; }

     serviceObject = null;

     final Context context = contextRef.get();

     if (DEBUG) { Log.v(TAG, ""Unbind "" + context); }",do not unbind if we do not have a connection object,detailed,
"diff --git a/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java b/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
index <HASH>..<HASH> 100644
--- a/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
+++ b/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
@@ -152,7 +152,7 @@ public class SerializableORB extends ORB implements Serializable {
         return delegate.create_operation_list(oper);
     }
 
-    @Override
+    //@Override Intellij keeps JDK in front
     public NVList create_operation_list(OperationDef operationDef) {
         return delegate.create_operation_list(operationDef);
     }",Intellij keeps JDK ORB class in front,zero_shot,
"diff --git a/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java b/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
index <HASH>..<HASH> 100644
--- a/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
+++ b/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
@@ -152,7 +152,7 @@ public class SerializableORB extends ORB implements Serializable {
         return delegate.create_operation_list(oper);
     }
 
-    @Override
+    //@Override Intellij keeps JDK in front
     public NVList create_operation_list(OperationDef operationDef) {
         return delegate.create_operation_list(operationDef);
     }",Intellij keeps JDK ORB class in front,conventional,
"diff --git a/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java b/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
index <HASH>..<HASH> 100644
--- a/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
+++ b/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
@@ -152,7 +152,7 @@ public class SerializableORB extends ORB implements Serializable {
         return delegate.create_operation_list(oper);
     }
 
-    @Override
+    //@Override Intellij keeps JDK in front
     public NVList create_operation_list(OperationDef operationDef) {
         return delegate.create_operation_list(operationDef);
     }",Intellij keeps JDK ORB class in front,imperative,
"diff --git a/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java b/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
index <HASH>..<HASH> 100644
--- a/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
+++ b/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
@@ -152,7 +152,7 @@ public class SerializableORB extends ORB implements Serializable {
         return delegate.create_operation_list(oper);
     }
 
-    @Override
+    //@Override Intellij keeps JDK in front
     public NVList create_operation_list(OperationDef operationDef) {
         return delegate.create_operation_list(operationDef);
     }",Intellij keeps JDK ORB class in front,minimal,
"diff --git a/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java b/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
index <HASH>..<HASH> 100644
--- a/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
+++ b/jacorb/src/main/java/org/jboss/as/jacorb/naming/SerializableORB.java
@@ -152,7 +152,7 @@ public class SerializableORB extends ORB implements Serializable {
         return delegate.create_operation_list(oper);
     }
 
-    @Override
+    //@Override Intellij keeps JDK in front
     public NVList create_operation_list(OperationDef operationDef) {
         return delegate.create_operation_list(operationDef);
     }",Intellij keeps JDK ORB class in front,detailed,
"diff --git a/bb/RubyVM/src2/com/rho/sync/SyncUtil.java b/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
index <HASH>..<HASH> 100644
--- a/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
+++ b/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
@@ -558,7 +558,7 @@ public class SyncUtil {
 			where.add(PerstLiteAdapter.SOURCE_ID, createInteger(id));
 			
 			adapter.updateIntoTable(createString(SyncConstants.SOURCES_TABLE), values, where);
-			adapter.deleteAllFromTable(createString(SyncConstants.CLIENT_INFO));			
+			//adapter.deleteAllFromTable(createString(SyncConstants.CLIENT_INFO));			
 		}
 		
 		return true;",Commented out db clear after login on BB to fix loading second copy of data due to new client id,zero_shot,
"diff --git a/bb/RubyVM/src2/com/rho/sync/SyncUtil.java b/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
index <HASH>..<HASH> 100644
--- a/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
+++ b/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
@@ -558,7 +558,7 @@ public class SyncUtil {
 			where.add(PerstLiteAdapter.SOURCE_ID, createInteger(id));
 			
 			adapter.updateIntoTable(createString(SyncConstants.SOURCES_TABLE), values, where);
-			adapter.deleteAllFromTable(createString(SyncConstants.CLIENT_INFO));			
+			//adapter.deleteAllFromTable(createString(SyncConstants.CLIENT_INFO));			
 		}
 		
 		return true;",Commented out db clear after login on BB to fix loading second copy of data due to new client id,conventional,
"diff --git a/bb/RubyVM/src2/com/rho/sync/SyncUtil.java b/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
index <HASH>..<HASH> 100644
--- a/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
+++ b/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
@@ -558,7 +558,7 @@ public class SyncUtil {
 			where.add(PerstLiteAdapter.SOURCE_ID, createInteger(id));
 			
 			adapter.updateIntoTable(createString(SyncConstants.SOURCES_TABLE), values, where);
-			adapter.deleteAllFromTable(createString(SyncConstants.CLIENT_INFO));			
+			//adapter.deleteAllFromTable(createString(SyncConstants.CLIENT_INFO));			
 		}
 		
 		return true;",Commented out db clear after login on BB to fix loading second copy of data due to new client id,imperative,
"diff --git a/bb/RubyVM/src2/com/rho/sync/SyncUtil.java b/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
index <HASH>..<HASH> 100644
--- a/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
+++ b/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
@@ -558,7 +558,7 @@ public class SyncUtil {
 			where.add(PerstLiteAdapter.SOURCE_ID, createInteger(id));
 			
 			adapter.updateIntoTable(createString(SyncConstants.SOURCES_TABLE), values, where);
-			adapter.deleteAllFromTable(createString(SyncConstants.CLIENT_INFO));			
+			//adapter.deleteAllFromTable(createString(SyncConstants.CLIENT_INFO));			
 		}
 		
 		return true;",Commented out db clear after login on BB to fix loading second copy of data due to new client id,minimal,
"diff --git a/bb/RubyVM/src2/com/rho/sync/SyncUtil.java b/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
index <HASH>..<HASH> 100644
--- a/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
+++ b/bb/RubyVM/src2/com/rho/sync/SyncUtil.java
@@ -558,7 +558,7 @@ public class SyncUtil {
 			where.add(PerstLiteAdapter.SOURCE_ID, createInteger(id));
 			
 			adapter.updateIntoTable(createString(SyncConstants.SOURCES_TABLE), values, where);
-			adapter.deleteAllFromTable(createString(SyncConstants.CLIENT_INFO));			
+			//adapter.deleteAllFromTable(createString(SyncConstants.CLIENT_INFO));			
 		}
 		
 		return true;",Commented out db clear after login on BB to fix loading second copy of data due to new client id,detailed,
"diff --git a/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java b/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
+++ b/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
@@ -41,9 +41,9 @@ class HeapQuickSelectSketch extends HeapUpdateSketch {
   private final int preambleLongs_;
   private int lgArrLongs_;
   private int hashTableThreshold_;  //never serialized
-  private int curCount_;
-  private long thetaLong_;
-  private boolean empty_;
+  int curCount_;
+  long thetaLong_;
+  boolean empty_;
 
   private long[] cache_;","make curCount, thetaLong and empty non final.",zero_shot,
"diff --git a/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java b/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
+++ b/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
@@ -41,9 +41,9 @@ class HeapQuickSelectSketch extends HeapUpdateSketch {
   private final int preambleLongs_;
   private int lgArrLongs_;
   private int hashTableThreshold_;  //never serialized
-  private int curCount_;
-  private long thetaLong_;
-  private boolean empty_;
+  int curCount_;
+  long thetaLong_;
+  boolean empty_;
 
   private long[] cache_;","make curCount, thetaLong and empty non final.",conventional,
"diff --git a/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java b/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
+++ b/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
@@ -41,9 +41,9 @@ class HeapQuickSelectSketch extends HeapUpdateSketch {
   private final int preambleLongs_;
   private int lgArrLongs_;
   private int hashTableThreshold_;  //never serialized
-  private int curCount_;
-  private long thetaLong_;
-  private boolean empty_;
+  int curCount_;
+  long thetaLong_;
+  boolean empty_;
 
   private long[] cache_;","make curCount, thetaLong and empty non final.",imperative,
"diff --git a/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java b/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
+++ b/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
@@ -41,9 +41,9 @@ class HeapQuickSelectSketch extends HeapUpdateSketch {
   private final int preambleLongs_;
   private int lgArrLongs_;
   private int hashTableThreshold_;  //never serialized
-  private int curCount_;
-  private long thetaLong_;
-  private boolean empty_;
+  int curCount_;
+  long thetaLong_;
+  boolean empty_;
 
   private long[] cache_;","make curCount, thetaLong and empty non final.",minimal,
"diff --git a/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java b/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
+++ b/src/main/java/com/yahoo/sketches/theta/HeapQuickSelectSketch.java
@@ -41,9 +41,9 @@ class HeapQuickSelectSketch extends HeapUpdateSketch {
   private final int preambleLongs_;
   private int lgArrLongs_;
   private int hashTableThreshold_;  //never serialized
-  private int curCount_;
-  private long thetaLong_;
-  private boolean empty_;
+  int curCount_;
+  long thetaLong_;
+  boolean empty_;
 
   private long[] cache_;","make curCount, thetaLong and empty non final.",detailed,
"diff --git a/core/src/main/java/com/github/gumtreediff/actions/model/Update.java b/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
index <HASH>..<HASH> 100644
--- a/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
+++ b/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
@@ -43,7 +43,7 @@ public class Update extends Action {
 
     @Override
     public String toString() {
-        return getName() + "" "" + node.toString() + "" from "" + node.getLabel() + "" to "" + value;
+        return getName() + "" "" + node.toShortString() + "" from "" + node.getLabel() + "" to "" + value;
     }
 
     @Override",replace toString by toShortString. fix #<I>,zero_shot,
"diff --git a/core/src/main/java/com/github/gumtreediff/actions/model/Update.java b/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
index <HASH>..<HASH> 100644
--- a/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
+++ b/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
@@ -43,7 +43,7 @@ public class Update extends Action {
 
     @Override
     public String toString() {
-        return getName() + "" "" + node.toString() + "" from "" + node.getLabel() + "" to "" + value;
+        return getName() + "" "" + node.toShortString() + "" from "" + node.getLabel() + "" to "" + value;
     }
 
     @Override",replace toString by toShortString. fix #<I>,conventional,
"diff --git a/core/src/main/java/com/github/gumtreediff/actions/model/Update.java b/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
index <HASH>..<HASH> 100644
--- a/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
+++ b/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
@@ -43,7 +43,7 @@ public class Update extends Action {
 
     @Override
     public String toString() {
-        return getName() + "" "" + node.toString() + "" from "" + node.getLabel() + "" to "" + value;
+        return getName() + "" "" + node.toShortString() + "" from "" + node.getLabel() + "" to "" + value;
     }
 
     @Override",replace toString by toShortString. fix #<I>,imperative,
"diff --git a/core/src/main/java/com/github/gumtreediff/actions/model/Update.java b/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
index <HASH>..<HASH> 100644
--- a/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
+++ b/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
@@ -43,7 +43,7 @@ public class Update extends Action {
 
     @Override
     public String toString() {
-        return getName() + "" "" + node.toString() + "" from "" + node.getLabel() + "" to "" + value;
+        return getName() + "" "" + node.toShortString() + "" from "" + node.getLabel() + "" to "" + value;
     }
 
     @Override",replace toString by toShortString. fix #<I>,minimal,
"diff --git a/core/src/main/java/com/github/gumtreediff/actions/model/Update.java b/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
index <HASH>..<HASH> 100644
--- a/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
+++ b/core/src/main/java/com/github/gumtreediff/actions/model/Update.java
@@ -43,7 +43,7 @@ public class Update extends Action {
 
     @Override
     public String toString() {
-        return getName() + "" "" + node.toString() + "" from "" + node.getLabel() + "" to "" + value;
+        return getName() + "" "" + node.toShortString() + "" from "" + node.getLabel() + "" to "" + value;
     }
 
     @Override",replace toString by toShortString. fix #<I>,detailed,
"diff --git a/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java b/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
index <HASH>..<HASH> 100644
--- a/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
+++ b/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
@@ -71,6 +71,14 @@ public class ListPartsResult extends XmlEntity {
 	this.storageClass = storageClass;
     }
 
+    public Initiator getInitiator() {
+	return initiator;
+    }
+
+    public void setInitiator(Initiator initiator) {
+	this.initiator = initiator;
+    }
+
     public Owner getOwner() {
 	return owner;
     }",Add missing get/setInitiator functions from previous commit,zero_shot,feat: Add initiator getter and setter to ListPartsResult.
"diff --git a/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java b/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
index <HASH>..<HASH> 100644
--- a/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
+++ b/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
@@ -71,6 +71,14 @@ public class ListPartsResult extends XmlEntity {
 	this.storageClass = storageClass;
     }
 
+    public Initiator getInitiator() {
+	return initiator;
+    }
+
+    public void setInitiator(Initiator initiator) {
+	this.initiator = initiator;
+    }
+
     public Owner getOwner() {
 	return owner;
     }",Add missing get/setInitiator functions from previous commit,conventional,"feat: add initiator field to ListPartsResult

This commit adds the `initiator` field to the `ListPartsResult` class. This allows users to retrieve information about the initiator of a multipart upload."
"diff --git a/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java b/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
index <HASH>..<HASH> 100644
--- a/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
+++ b/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
@@ -71,6 +71,14 @@ public class ListPartsResult extends XmlEntity {
 	this.storageClass = storageClass;
     }
 
+    public Initiator getInitiator() {
+	return initiator;
+    }
+
+    public void setInitiator(Initiator initiator) {
+	this.initiator = initiator;
+    }
+
     public Owner getOwner() {
 	return owner;
     }",Add missing get/setInitiator functions from previous commit,imperative,Add initiator field to ListPartsResult.
"diff --git a/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java b/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
index <HASH>..<HASH> 100644
--- a/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
+++ b/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
@@ -71,6 +71,14 @@ public class ListPartsResult extends XmlEntity {
 	this.storageClass = storageClass;
     }
 
+    public Initiator getInitiator() {
+	return initiator;
+    }
+
+    public void setInitiator(Initiator initiator) {
+	this.initiator = initiator;
+    }
+
     public Owner getOwner() {
 	return owner;
     }",Add missing get/setInitiator functions from previous commit,minimal,feat: Add getter and setter for initiator in ListPartsResult
"diff --git a/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java b/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
index <HASH>..<HASH> 100644
--- a/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
+++ b/src/main/java/io/minio/objectstorage/client/messages/ListPartsResult.java
@@ -71,6 +71,14 @@ public class ListPartsResult extends XmlEntity {
 	this.storageClass = storageClass;
     }
 
+    public Initiator getInitiator() {
+	return initiator;
+    }
+
+    public void setInitiator(Initiator initiator) {
+	this.initiator = initiator;
+    }
+
     public Owner getOwner() {
 	return owner;
     }",Add missing get/setInitiator functions from previous commit,detailed,"feat: Add initiator field to ListPartsResult

This commit introduces the `initiator` field to the `ListPartsResult` class. This field represents the entity that initiated the multipart upload.

The following changes were made:

- Added `initiator` field of type `Initiator` to the `ListPartsResult` class.
- Added getter and setter methods for the `initiator` field.

These changes allow retrieving the initiator information from the List Parts API response, which is useful for auditing and tracking multipart uploads."
"diff --git a/src/net/jeremybrooks/jinx/api/FavoritesApi.java b/src/net/jeremybrooks/jinx/api/FavoritesApi.java
index <HASH>..<HASH> 100644
--- a/src/net/jeremybrooks/jinx/api/FavoritesApi.java
+++ b/src/net/jeremybrooks/jinx/api/FavoritesApi.java
@@ -252,7 +252,7 @@ public class FavoritesApi {
 	    params.put(""page"", Integer.toString(page));
 	}
 
-	Document doc = Jinx.getInstance().callFlickr(params);
+	Document doc = Jinx.getInstance().callFlickr(params, false);
 
 	return PhotosApi.getInstance().parsePhotosXml(doc);
     }",Added Serializable. Fixed a method that did not require authentication.,zero_shot,Pass false to callFlickr to disable caching when retrieving favorites.
"diff --git a/src/net/jeremybrooks/jinx/api/FavoritesApi.java b/src/net/jeremybrooks/jinx/api/FavoritesApi.java
index <HASH>..<HASH> 100644
--- a/src/net/jeremybrooks/jinx/api/FavoritesApi.java
+++ b/src/net/jeremybrooks/jinx/api/FavoritesApi.java
@@ -252,7 +252,7 @@ public class FavoritesApi {
 	    params.put(""page"", Integer.toString(page));
 	}
 
-	Document doc = Jinx.getInstance().callFlickr(params);
+	Document doc = Jinx.getInstance().callFlickr(params, false);
 
 	return PhotosApi.getInstance().parsePhotosXml(doc);
     }",Added Serializable. Fixed a method that did not require authentication.,conventional,fix: Avoid caching of favorite photos
"diff --git a/src/net/jeremybrooks/jinx/api/FavoritesApi.java b/src/net/jeremybrooks/jinx/api/FavoritesApi.java
index <HASH>..<HASH> 100644
--- a/src/net/jeremybrooks/jinx/api/FavoritesApi.java
+++ b/src/net/jeremybrooks/jinx/api/FavoritesApi.java
@@ -252,7 +252,7 @@ public class FavoritesApi {
 	    params.put(""page"", Integer.toString(page));
 	}
 
-	Document doc = Jinx.getInstance().callFlickr(params);
+	Document doc = Jinx.getInstance().callFlickr(params, false);
 
 	return PhotosApi.getInstance().parsePhotosXml(doc);
     }",Added Serializable. Fixed a method that did not require authentication.,imperative,"Pass 'false' to callFlickr to disable caching for favorite photos

The favorite photos endpoint is dynamic and changes with user's interactions. By passing 'false' to callFlickr, caching is disabled, so users will always see current information."
"diff --git a/src/net/jeremybrooks/jinx/api/FavoritesApi.java b/src/net/jeremybrooks/jinx/api/FavoritesApi.java
index <HASH>..<HASH> 100644
--- a/src/net/jeremybrooks/jinx/api/FavoritesApi.java
+++ b/src/net/jeremybrooks/jinx/api/FavoritesApi.java
@@ -252,7 +252,7 @@ public class FavoritesApi {
 	    params.put(""page"", Integer.toString(page));
 	}
 
-	Document doc = Jinx.getInstance().callFlickr(params);
+	Document doc = Jinx.getInstance().callFlickr(params, false);
 
 	return PhotosApi.getInstance().parsePhotosXml(doc);
     }",Added Serializable. Fixed a method that did not require authentication.,minimal,"Fix: Do not sign calls to flickr.favorites.getList

The flickr.favorites.getList API method requires unsigned calls."
"diff --git a/src/net/jeremybrooks/jinx/api/FavoritesApi.java b/src/net/jeremybrooks/jinx/api/FavoritesApi.java
index <HASH>..<HASH> 100644
--- a/src/net/jeremybrooks/jinx/api/FavoritesApi.java
+++ b/src/net/jeremybrooks/jinx/api/FavoritesApi.java
@@ -252,7 +252,7 @@ public class FavoritesApi {
 	    params.put(""page"", Integer.toString(page));
 	}
 
-	Document doc = Jinx.getInstance().callFlickr(params);
+	Document doc = Jinx.getInstance().callFlickr(params, false);
 
 	return PhotosApi.getInstance().parsePhotosXml(doc);
     }",Added Serializable. Fixed a method that did not require authentication.,detailed,"Fix: Pass `cache` parameter to `callFlickr` in `getPublicFavorites`

This commit fixes an issue in the `getPublicFavorites` method of the `FavoritesApi` class.

Previously, the `callFlickr` method was being called without explicitly specifying the `cache` parameter. The `callFlickr` method now requires this parameter to be explicitly set.

This commit explicitly sets the `cache` parameter to `false` in the `callFlickr` call within the `getPublicFavorites` method. This ensures that the `callFlickr` method is called correctly and avoids potential errors or unexpected behavior related to caching. This is because fetching public favorites is likely to be a common operation that benefits from caching. Setting it to false ensures that we always get the latest results and prevent stale data."
"diff --git a/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java b/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
index <HASH>..<HASH> 100644
--- a/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
+++ b/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
@@ -34,6 +34,8 @@ public class GeoLocationAsync {
 					  m_lon = coord.getLongitude();
 					  m_bDetermined = true;
 					}
+					LOG.TRACE(""GetLocation - latitude: "" + Double.toString(m_lat));
+					LOG.TRACE(""GetLocation - longitude: "" + Double.toString(m_lon));
 				}else
 					LOG.INFO(""GetLocation - getQualifiedCoordinates: return null."");
 			}else",Add more log tracing to BB GPS implementation,zero_shot,Add tracing logs for latitude and longitude values in GetLocation method.
"diff --git a/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java b/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
index <HASH>..<HASH> 100644
--- a/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
+++ b/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
@@ -34,6 +34,8 @@ public class GeoLocationAsync {
 					  m_lon = coord.getLongitude();
 					  m_bDetermined = true;
 					}
+					LOG.TRACE(""GetLocation - latitude: "" + Double.toString(m_lat));
+					LOG.TRACE(""GetLocation - longitude: "" + Double.toString(m_lon));
 				}else
 					LOG.INFO(""GetLocation - getQualifiedCoordinates: return null."");
 			}else",Add more log tracing to BB GPS implementation,conventional,"fix: Add logs for latitude and longitude in GeoLocationAsync

The commit adds trace logs to display the latitude and longitude values obtained in the `GetLocation` method of `GeoLocationAsync.java`. This helps in debugging and verifying the location information being retrieved."
"diff --git a/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java b/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
index <HASH>..<HASH> 100644
--- a/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
+++ b/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
@@ -34,6 +34,8 @@ public class GeoLocationAsync {
 					  m_lon = coord.getLongitude();
 					  m_bDetermined = true;
 					}
+					LOG.TRACE(""GetLocation - latitude: "" + Double.toString(m_lat));
+					LOG.TRACE(""GetLocation - longitude: "" + Double.toString(m_lon));
 				}else
 					LOG.INFO(""GetLocation - getQualifiedCoordinates: return null."");
 			}else",Add more log tracing to BB GPS implementation,imperative,Add debug logs for latitude and longitude in GeoLocationAsync
"diff --git a/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java b/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
index <HASH>..<HASH> 100644
--- a/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
+++ b/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
@@ -34,6 +34,8 @@ public class GeoLocationAsync {
 					  m_lon = coord.getLongitude();
 					  m_bDetermined = true;
 					}
+					LOG.TRACE(""GetLocation - latitude: "" + Double.toString(m_lat));
+					LOG.TRACE(""GetLocation - longitude: "" + Double.toString(m_lon));
 				}else
 					LOG.INFO(""GetLocation - getQualifiedCoordinates: return null."");
 			}else",Add more log tracing to BB GPS implementation,minimal,Fix(location): Add latitude and longitude to log trace.
"diff --git a/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java b/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
index <HASH>..<HASH> 100644
--- a/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
+++ b/platform/bb/rhodes/src/com/rho/location/GeoLocationAsync.java
@@ -34,6 +34,8 @@ public class GeoLocationAsync {
 					  m_lon = coord.getLongitude();
 					  m_bDetermined = true;
 					}
+					LOG.TRACE(""GetLocation - latitude: "" + Double.toString(m_lat));
+					LOG.TRACE(""GetLocation - longitude: "" + Double.toString(m_lon));
 				}else
 					LOG.INFO(""GetLocation - getQualifiedCoordinates: return null."");
 			}else",Add more log tracing to BB GPS implementation,detailed,"Fix(location): Add detailed logging for latitude and longitude in GeoLocationAsync

This commit adds detailed logging of latitude and longitude values obtained from the GPS in `GeoLocationAsync.java`.

The changes include:

- Adding `LOG.TRACE` statements to output the latitude and longitude values after they are retrieved from `QualifiedCoordinates`.
- The latitude and longitude are printed into rholog.txt for debugging purposes."
"diff --git a/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java b/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
index <HASH>..<HASH> 100644
--- a/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
+++ b/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
@@ -76,7 +76,7 @@ public class AsyncSemaphore {
         
     }
     
-    private int counter;
+    private volatile int counter;
     private final Set<Entry> listeners = new LinkedHashSet<Entry>();
 
     public AsyncSemaphore(int permits) {",Fixed - AsyncSemaphore counter field should be volatile. #<I>,zero_shot,Make `counter` field volatile in `AsyncSemaphore` to ensure visibility across threads.
"diff --git a/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java b/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
index <HASH>..<HASH> 100644
--- a/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
+++ b/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
@@ -76,7 +76,7 @@ public class AsyncSemaphore {
         
     }
     
-    private int counter;
+    private volatile int counter;
     private final Set<Entry> listeners = new LinkedHashSet<Entry>();
 
     public AsyncSemaphore(int permits) {",Fixed - AsyncSemaphore counter field should be volatile. #<I>,conventional,
"diff --git a/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java b/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
index <HASH>..<HASH> 100644
--- a/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
+++ b/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
@@ -76,7 +76,7 @@ public class AsyncSemaphore {
         
     }
     
-    private int counter;
+    private volatile int counter;
     private final Set<Entry> listeners = new LinkedHashSet<Entry>();
 
     public AsyncSemaphore(int permits) {",Fixed - AsyncSemaphore counter field should be volatile. #<I>,imperative,
"diff --git a/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java b/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
index <HASH>..<HASH> 100644
--- a/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
+++ b/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
@@ -76,7 +76,7 @@ public class AsyncSemaphore {
         
     }
     
-    private int counter;
+    private volatile int counter;
     private final Set<Entry> listeners = new LinkedHashSet<Entry>();
 
     public AsyncSemaphore(int permits) {",Fixed - AsyncSemaphore counter field should be volatile. #<I>,minimal,
"diff --git a/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java b/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
index <HASH>..<HASH> 100644
--- a/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
+++ b/redisson/src/main/java/org/redisson/pubsub/AsyncSemaphore.java
@@ -76,7 +76,7 @@ public class AsyncSemaphore {
         
     }
     
-    private int counter;
+    private volatile int counter;
     private final Set<Entry> listeners = new LinkedHashSet<Entry>();
 
     public AsyncSemaphore(int permits) {",Fixed - AsyncSemaphore counter field should be volatile. #<I>,detailed,
"diff --git a/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java b/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
index <HASH>..<HASH> 100644
--- a/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
+++ b/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
@@ -64,7 +64,7 @@ public class BasicBlock implements Comparable, Debug {
 		nullCheckInstructionSet.set(Constants.SASTORE);
 		nullCheckInstructionSet.set(Constants.MONITORENTER);
 		nullCheckInstructionSet.set(Constants.MONITOREXIT);
-		nullCheckInstructionSet.set(Constants.ATHROW);
+		//nullCheckInstructionSet.set(Constants.ATHROW);
 		// Any others?
 	}","Don't add ATHROW to null check instruction set - causes problems
in CFG construction.  Need to investigate.


git-svn-id: <URL>",zero_shot,
"diff --git a/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java b/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
index <HASH>..<HASH> 100644
--- a/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
+++ b/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
@@ -64,7 +64,7 @@ public class BasicBlock implements Comparable, Debug {
 		nullCheckInstructionSet.set(Constants.SASTORE);
 		nullCheckInstructionSet.set(Constants.MONITORENTER);
 		nullCheckInstructionSet.set(Constants.MONITOREXIT);
-		nullCheckInstructionSet.set(Constants.ATHROW);
+		//nullCheckInstructionSet.set(Constants.ATHROW);
 		// Any others?
 	}","Don't add ATHROW to null check instruction set - causes problems
in CFG construction.  Need to investigate.


git-svn-id: <URL>",conventional,
"diff --git a/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java b/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
index <HASH>..<HASH> 100644
--- a/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
+++ b/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
@@ -64,7 +64,7 @@ public class BasicBlock implements Comparable, Debug {
 		nullCheckInstructionSet.set(Constants.SASTORE);
 		nullCheckInstructionSet.set(Constants.MONITORENTER);
 		nullCheckInstructionSet.set(Constants.MONITOREXIT);
-		nullCheckInstructionSet.set(Constants.ATHROW);
+		//nullCheckInstructionSet.set(Constants.ATHROW);
 		// Any others?
 	}","Don't add ATHROW to null check instruction set - causes problems
in CFG construction.  Need to investigate.


git-svn-id: <URL>",imperative,
"diff --git a/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java b/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
index <HASH>..<HASH> 100644
--- a/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
+++ b/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
@@ -64,7 +64,7 @@ public class BasicBlock implements Comparable, Debug {
 		nullCheckInstructionSet.set(Constants.SASTORE);
 		nullCheckInstructionSet.set(Constants.MONITORENTER);
 		nullCheckInstructionSet.set(Constants.MONITOREXIT);
-		nullCheckInstructionSet.set(Constants.ATHROW);
+		//nullCheckInstructionSet.set(Constants.ATHROW);
 		// Any others?
 	}","Don't add ATHROW to null check instruction set - causes problems
in CFG construction.  Need to investigate.


git-svn-id: <URL>",minimal,
"diff --git a/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java b/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
index <HASH>..<HASH> 100644
--- a/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
+++ b/findbugs/src/java/edu/umd/cs/findbugs/ba/BasicBlock.java
@@ -64,7 +64,7 @@ public class BasicBlock implements Comparable, Debug {
 		nullCheckInstructionSet.set(Constants.SASTORE);
 		nullCheckInstructionSet.set(Constants.MONITORENTER);
 		nullCheckInstructionSet.set(Constants.MONITOREXIT);
-		nullCheckInstructionSet.set(Constants.ATHROW);
+		//nullCheckInstructionSet.set(Constants.ATHROW);
 		// Any others?
 	}","Don't add ATHROW to null check instruction set - causes problems
in CFG construction.  Need to investigate.


git-svn-id: <URL>",detailed,
"diff --git a/src/main/java/com/relayrides/pushy/apns/ApnsClient.java b/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
+++ b/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
@@ -205,6 +205,8 @@ public class ApnsClient<T extends ApnsPushNotification> {
         });
     }
 
+    // TODO Expose connection/handshake timeout settings
+
     /**
      * <p>Connects to the given APNs gateway on the default (HTTPS) port ({@value DEFAULT_APNS_PORT}).</p>
      *",Added a TODO for connection timeouts.,zero_shot,
"diff --git a/src/main/java/com/relayrides/pushy/apns/ApnsClient.java b/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
+++ b/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
@@ -205,6 +205,8 @@ public class ApnsClient<T extends ApnsPushNotification> {
         });
     }
 
+    // TODO Expose connection/handshake timeout settings
+
     /**
      * <p>Connects to the given APNs gateway on the default (HTTPS) port ({@value DEFAULT_APNS_PORT}).</p>
      *",Added a TODO for connection timeouts.,conventional,
"diff --git a/src/main/java/com/relayrides/pushy/apns/ApnsClient.java b/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
+++ b/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
@@ -205,6 +205,8 @@ public class ApnsClient<T extends ApnsPushNotification> {
         });
     }
 
+    // TODO Expose connection/handshake timeout settings
+
     /**
      * <p>Connects to the given APNs gateway on the default (HTTPS) port ({@value DEFAULT_APNS_PORT}).</p>
      *",Added a TODO for connection timeouts.,imperative,
"diff --git a/src/main/java/com/relayrides/pushy/apns/ApnsClient.java b/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
+++ b/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
@@ -205,6 +205,8 @@ public class ApnsClient<T extends ApnsPushNotification> {
         });
     }
 
+    // TODO Expose connection/handshake timeout settings
+
     /**
      * <p>Connects to the given APNs gateway on the default (HTTPS) port ({@value DEFAULT_APNS_PORT}).</p>
      *",Added a TODO for connection timeouts.,minimal,
"diff --git a/src/main/java/com/relayrides/pushy/apns/ApnsClient.java b/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
index <HASH>..<HASH> 100644
--- a/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
+++ b/src/main/java/com/relayrides/pushy/apns/ApnsClient.java
@@ -205,6 +205,8 @@ public class ApnsClient<T extends ApnsPushNotification> {
         });
     }
 
+    // TODO Expose connection/handshake timeout settings
+
     /**
      * <p>Connects to the given APNs gateway on the default (HTTPS) port ({@value DEFAULT_APNS_PORT}).</p>
      *",Added a TODO for connection timeouts.,detailed,
"diff --git a/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java b/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
index <HASH>..<HASH> 100644
--- a/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
+++ b/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
@@ -306,6 +306,10 @@ public final class InMemoryCache {
 				}
 				
 				data = subs.data;
+				
+				if (data != null) {
+					send = false;
+				}
 
 				if (send || (data == null)) {
 					subs.subs.put(context.sub, null);",InMemoryCache: No request send when data is available,zero_shot,
"diff --git a/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java b/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
index <HASH>..<HASH> 100644
--- a/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
+++ b/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
@@ -306,6 +306,10 @@ public final class InMemoryCache {
 				}
 				
 				data = subs.data;
+				
+				if (data != null) {
+					send = false;
+				}
 
 				if (send || (data == null)) {
 					subs.subs.put(context.sub, null);",InMemoryCache: No request send when data is available,conventional,
"diff --git a/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java b/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
index <HASH>..<HASH> 100644
--- a/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
+++ b/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
@@ -306,6 +306,10 @@ public final class InMemoryCache {
 				}
 				
 				data = subs.data;
+				
+				if (data != null) {
+					send = false;
+				}
 
 				if (send || (data == null)) {
 					subs.subs.put(context.sub, null);",InMemoryCache: No request send when data is available,imperative,
"diff --git a/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java b/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
index <HASH>..<HASH> 100644
--- a/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
+++ b/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
@@ -306,6 +306,10 @@ public final class InMemoryCache {
 				}
 				
 				data = subs.data;
+				
+				if (data != null) {
+					send = false;
+				}
 
 				if (send || (data == null)) {
 					subs.subs.put(context.sub, null);",InMemoryCache: No request send when data is available,minimal,
"diff --git a/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java b/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
index <HASH>..<HASH> 100644
--- a/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
+++ b/ninio-core/src/main/java/com/davfx/ninio/core/InMemoryCache.java
@@ -306,6 +306,10 @@ public final class InMemoryCache {
 				}
 				
 				data = subs.data;
+				
+				if (data != null) {
+					send = false;
+				}
 
 				if (send || (data == null)) {
 					subs.subs.put(context.sub, null);",InMemoryCache: No request send when data is available,detailed,
"diff --git a/Tests/test/org/bimserver/tests/AllTests.java b/Tests/test/org/bimserver/tests/AllTests.java
index <HASH>..<HASH> 100644
--- a/Tests/test/org/bimserver/tests/AllTests.java
+++ b/Tests/test/org/bimserver/tests/AllTests.java
@@ -94,7 +94,7 @@ public class AllTests {
 		BimServerConfig config = new BimServerConfig();

 		config.setHomeDir(home);

 		config.setStartEmbeddedWebServer(true);

-		config.setPort(8080);

+		config.setPort(7010);

 		config.setResourceFetcher(new LocalDevelopmentResourceFetcher(Paths.get(""../"")));

 		config.setClassPath(System.getProperty(""java.class.path""));",Changed test port to <I>,zero_shot,
"diff --git a/Tests/test/org/bimserver/tests/AllTests.java b/Tests/test/org/bimserver/tests/AllTests.java
index <HASH>..<HASH> 100644
--- a/Tests/test/org/bimserver/tests/AllTests.java
+++ b/Tests/test/org/bimserver/tests/AllTests.java
@@ -94,7 +94,7 @@ public class AllTests {
 		BimServerConfig config = new BimServerConfig();

 		config.setHomeDir(home);

 		config.setStartEmbeddedWebServer(true);

-		config.setPort(8080);

+		config.setPort(7010);

 		config.setResourceFetcher(new LocalDevelopmentResourceFetcher(Paths.get(""../"")));

 		config.setClassPath(System.getProperty(""java.class.path""));",Changed test port to <I>,conventional,
"diff --git a/Tests/test/org/bimserver/tests/AllTests.java b/Tests/test/org/bimserver/tests/AllTests.java
index <HASH>..<HASH> 100644
--- a/Tests/test/org/bimserver/tests/AllTests.java
+++ b/Tests/test/org/bimserver/tests/AllTests.java
@@ -94,7 +94,7 @@ public class AllTests {
 		BimServerConfig config = new BimServerConfig();

 		config.setHomeDir(home);

 		config.setStartEmbeddedWebServer(true);

-		config.setPort(8080);

+		config.setPort(7010);

 		config.setResourceFetcher(new LocalDevelopmentResourceFetcher(Paths.get(""../"")));

 		config.setClassPath(System.getProperty(""java.class.path""));",Changed test port to <I>,imperative,
"diff --git a/Tests/test/org/bimserver/tests/AllTests.java b/Tests/test/org/bimserver/tests/AllTests.java
index <HASH>..<HASH> 100644
--- a/Tests/test/org/bimserver/tests/AllTests.java
+++ b/Tests/test/org/bimserver/tests/AllTests.java
@@ -94,7 +94,7 @@ public class AllTests {
 		BimServerConfig config = new BimServerConfig();

 		config.setHomeDir(home);

 		config.setStartEmbeddedWebServer(true);

-		config.setPort(8080);

+		config.setPort(7010);

 		config.setResourceFetcher(new LocalDevelopmentResourceFetcher(Paths.get(""../"")));

 		config.setClassPath(System.getProperty(""java.class.path""));",Changed test port to <I>,minimal,
"diff --git a/Tests/test/org/bimserver/tests/AllTests.java b/Tests/test/org/bimserver/tests/AllTests.java
index <HASH>..<HASH> 100644
--- a/Tests/test/org/bimserver/tests/AllTests.java
+++ b/Tests/test/org/bimserver/tests/AllTests.java
@@ -94,7 +94,7 @@ public class AllTests {
 		BimServerConfig config = new BimServerConfig();

 		config.setHomeDir(home);

 		config.setStartEmbeddedWebServer(true);

-		config.setPort(8080);

+		config.setPort(7010);

 		config.setResourceFetcher(new LocalDevelopmentResourceFetcher(Paths.get(""../"")));

 		config.setClassPath(System.getProperty(""java.class.path""));",Changed test port to <I>,detailed,
"diff --git a/src/org/jgroups/protocols/pbcast/FLUSH.java b/src/org/jgroups/protocols/pbcast/FLUSH.java
index <HASH>..<HASH> 100644
--- a/src/org/jgroups/protocols/pbcast/FLUSH.java
+++ b/src/org/jgroups/protocols/pbcast/FLUSH.java
@@ -548,8 +548,8 @@ public class FLUSH extends Protocol {
     }
     
     private void sendUnBlockUpToChannel() {
-        up_prot.up(new Event(Event.UNBLOCK));
         sentBlock.set(false);
+        up_prot.up(new Event(Event.UNBLOCK));       
     }
 
     private boolean isCurrentFlushMessage(FlushHeader fh) {",eliminating thread race that removed BLOCK/UNBLOCK events in certain cases,zero_shot,
"diff --git a/src/org/jgroups/protocols/pbcast/FLUSH.java b/src/org/jgroups/protocols/pbcast/FLUSH.java
index <HASH>..<HASH> 100644
--- a/src/org/jgroups/protocols/pbcast/FLUSH.java
+++ b/src/org/jgroups/protocols/pbcast/FLUSH.java
@@ -548,8 +548,8 @@ public class FLUSH extends Protocol {
     }
     
     private void sendUnBlockUpToChannel() {
-        up_prot.up(new Event(Event.UNBLOCK));
         sentBlock.set(false);
+        up_prot.up(new Event(Event.UNBLOCK));       
     }
 
     private boolean isCurrentFlushMessage(FlushHeader fh) {",eliminating thread race that removed BLOCK/UNBLOCK events in certain cases,conventional,
"diff --git a/src/org/jgroups/protocols/pbcast/FLUSH.java b/src/org/jgroups/protocols/pbcast/FLUSH.java
index <HASH>..<HASH> 100644
--- a/src/org/jgroups/protocols/pbcast/FLUSH.java
+++ b/src/org/jgroups/protocols/pbcast/FLUSH.java
@@ -548,8 +548,8 @@ public class FLUSH extends Protocol {
     }
     
     private void sendUnBlockUpToChannel() {
-        up_prot.up(new Event(Event.UNBLOCK));
         sentBlock.set(false);
+        up_prot.up(new Event(Event.UNBLOCK));       
     }
 
     private boolean isCurrentFlushMessage(FlushHeader fh) {",eliminating thread race that removed BLOCK/UNBLOCK events in certain cases,imperative,
"diff --git a/src/org/jgroups/protocols/pbcast/FLUSH.java b/src/org/jgroups/protocols/pbcast/FLUSH.java
index <HASH>..<HASH> 100644
--- a/src/org/jgroups/protocols/pbcast/FLUSH.java
+++ b/src/org/jgroups/protocols/pbcast/FLUSH.java
@@ -548,8 +548,8 @@ public class FLUSH extends Protocol {
     }
     
     private void sendUnBlockUpToChannel() {
-        up_prot.up(new Event(Event.UNBLOCK));
         sentBlock.set(false);
+        up_prot.up(new Event(Event.UNBLOCK));       
     }
 
     private boolean isCurrentFlushMessage(FlushHeader fh) {",eliminating thread race that removed BLOCK/UNBLOCK events in certain cases,minimal,
"diff --git a/src/org/jgroups/protocols/pbcast/FLUSH.java b/src/org/jgroups/protocols/pbcast/FLUSH.java
index <HASH>..<HASH> 100644
--- a/src/org/jgroups/protocols/pbcast/FLUSH.java
+++ b/src/org/jgroups/protocols/pbcast/FLUSH.java
@@ -548,8 +548,8 @@ public class FLUSH extends Protocol {
     }
     
     private void sendUnBlockUpToChannel() {
-        up_prot.up(new Event(Event.UNBLOCK));
         sentBlock.set(false);
+        up_prot.up(new Event(Event.UNBLOCK));       
     }
 
     private boolean isCurrentFlushMessage(FlushHeader fh) {",eliminating thread race that removed BLOCK/UNBLOCK events in certain cases,detailed,
"diff --git a/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java b/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
index <HASH>..<HASH> 100644
--- a/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
+++ b/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
@@ -146,7 +146,6 @@ public interface Constants extends Constant
     public static final int PREVIOUS_RECORD = -1;
     /**
      * The TEMP_KEY_AREA are a temporary copy of the fields that belong to a key.
-     * @see FILE_KEY_AREA.
      */
     public static final int TEMP_KEY_AREA = 1;",Update external repo to include correct soap archives,zero_shot,
"diff --git a/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java b/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
index <HASH>..<HASH> 100644
--- a/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
+++ b/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
@@ -146,7 +146,6 @@ public interface Constants extends Constant
     public static final int PREVIOUS_RECORD = -1;
     /**
      * The TEMP_KEY_AREA are a temporary copy of the fields that belong to a key.
-     * @see FILE_KEY_AREA.
      */
     public static final int TEMP_KEY_AREA = 1;",Update external repo to include correct soap archives,conventional,
"diff --git a/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java b/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
index <HASH>..<HASH> 100644
--- a/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
+++ b/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
@@ -146,7 +146,6 @@ public interface Constants extends Constant
     public static final int PREVIOUS_RECORD = -1;
     /**
      * The TEMP_KEY_AREA are a temporary copy of the fields that belong to a key.
-     * @see FILE_KEY_AREA.
      */
     public static final int TEMP_KEY_AREA = 1;",Update external repo to include correct soap archives,imperative,
"diff --git a/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java b/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
index <HASH>..<HASH> 100644
--- a/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
+++ b/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
@@ -146,7 +146,6 @@ public interface Constants extends Constant
     public static final int PREVIOUS_RECORD = -1;
     /**
      * The TEMP_KEY_AREA are a temporary copy of the fields that belong to a key.
-     * @see FILE_KEY_AREA.
      */
     public static final int TEMP_KEY_AREA = 1;",Update external repo to include correct soap archives,minimal,"Fix: Remove redundant javadoc reference

The `@see FILE_KEY_AREA` reference in the `TEMP_KEY_AREA` javadoc was redundant. This commit removes it."
"diff --git a/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java b/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
index <HASH>..<HASH> 100644
--- a/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
+++ b/thin/base/db/base/src/main/java/org/jbundle/thin/base/db/Constants.java
@@ -146,7 +146,6 @@ public interface Constants extends Constant
     public static final int PREVIOUS_RECORD = -1;
     /**
      * The TEMP_KEY_AREA are a temporary copy of the fields that belong to a key.
-     * @see FILE_KEY_AREA.
      */
     public static final int TEMP_KEY_AREA = 1;",Update external repo to include correct soap archives,detailed,"Fix: Remove incorrect JavaDoc reference in Constants.java

The JavaDoc comment for TEMP_KEY_AREA incorrectly referenced FILE_KEY_AREA. This commit removes the erroneous reference as TEMP_KEY_AREA and FILE_KEY_AREA are distinct concepts and the reference was misleading."
"diff --git a/src/test/java/com/brettonw/bag/BagArrayTest.java b/src/test/java/com/brettonw/bag/BagArrayTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/com/brettonw/bag/BagArrayTest.java
+++ b/src/test/java/com/brettonw/bag/BagArrayTest.java
@@ -182,7 +182,7 @@ public class BagArrayTest {
         BagObject bagObject = new BagObject ()
                 .put (""a"", new BagArray ()
                         .add (new BagObject ()
-                            .put (""x"", ""y"")
+                                .put (""x"", ""y"")
                         )
                 );
         AppTest.report (bagObject.getString (""a/#first/x""), ""y"", ""Hierarchical indexing of arrays using strings - 1"");",and a teensy bit more cleanup,zero_shot,Fix: Corrected formatting in BagArrayTest.java for better readability.
"diff --git a/src/test/java/com/brettonw/bag/BagArrayTest.java b/src/test/java/com/brettonw/bag/BagArrayTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/com/brettonw/bag/BagArrayTest.java
+++ b/src/test/java/com/brettonw/bag/BagArrayTest.java
@@ -182,7 +182,7 @@ public class BagArrayTest {
         BagObject bagObject = new BagObject ()
                 .put (""a"", new BagArray ()
                         .add (new BagObject ()
-                            .put (""x"", ""y"")
+                                .put (""x"", ""y"")
                         )
                 );
         AppTest.report (bagObject.getString (""a/#first/x""), ""y"", ""Hierarchical indexing of arrays using strings - 1"");",and a teensy bit more cleanup,conventional,fix: Hierarchical indexing of arrays using strings
"diff --git a/src/test/java/com/brettonw/bag/BagArrayTest.java b/src/test/java/com/brettonw/bag/BagArrayTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/com/brettonw/bag/BagArrayTest.java
+++ b/src/test/java/com/brettonw/bag/BagArrayTest.java
@@ -182,7 +182,7 @@ public class BagArrayTest {
         BagObject bagObject = new BagObject ()
                 .put (""a"", new BagArray ()
                         .add (new BagObject ()
-                            .put (""x"", ""y"")
+                                .put (""x"", ""y"")
                         )
                 );
         AppTest.report (bagObject.getString (""a/#first/x""), ""y"", ""Hierarchical indexing of arrays using strings - 1"");",and a teensy bit more cleanup,imperative,Fix hierarchical indexing of arrays using strings.
"diff --git a/src/test/java/com/brettonw/bag/BagArrayTest.java b/src/test/java/com/brettonw/bag/BagArrayTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/com/brettonw/bag/BagArrayTest.java
+++ b/src/test/java/com/brettonw/bag/BagArrayTest.java
@@ -182,7 +182,7 @@ public class BagArrayTest {
         BagObject bagObject = new BagObject ()
                 .put (""a"", new BagArray ()
                         .add (new BagObject ()
-                            .put (""x"", ""y"")
+                                .put (""x"", ""y"")
                         )
                 );
         AppTest.report (bagObject.getString (""a/#first/x""), ""y"", ""Hierarchical indexing of arrays using strings - 1"");",and a teensy bit more cleanup,minimal,Fix: Hierarchical indexing of arrays using strings
"diff --git a/src/test/java/com/brettonw/bag/BagArrayTest.java b/src/test/java/com/brettonw/bag/BagArrayTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/com/brettonw/bag/BagArrayTest.java
+++ b/src/test/java/com/brettonw/bag/BagArrayTest.java
@@ -182,7 +182,7 @@ public class BagArrayTest {
         BagObject bagObject = new BagObject ()
                 .put (""a"", new BagArray ()
                         .add (new BagObject ()
-                            .put (""x"", ""y"")
+                                .put (""x"", ""y"")
                         )
                 );
         AppTest.report (bagObject.getString (""a/#first/x""), ""y"", ""Hierarchical indexing of arrays using strings - 1"");",and a teensy bit more cleanup,detailed,"Fix: Corrected formatting in BagArrayTest.java

This commit addresses a minor formatting issue in `src/test/java/com/brettonw/bag/BagArrayTest.java`. Specifically, it corrects the indentation of the `put(""x"", ""y"")` line within the nested `BagObject` creation. While functionally equivalent, the change improves the readability and maintainability of the test code by adhering to a consistent indentation style."
"diff --git a/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java b/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
index <HASH>..<HASH> 100644
--- a/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
+++ b/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
@@ -71,7 +71,7 @@ import static com.vanniktech.emoji.Utils.checkNotNull;
     // No instances apart from singleton.
   }
 
-  static EmojiManager getInstance() {
+  public static EmojiManager getInstance() {
     return INSTANCE;
   }",Expose instance so that can access replaceWithImages from external packages (#<I>),zero_shot,Expose the EmojiManager's getInstance method to allow external access.
"diff --git a/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java b/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
index <HASH>..<HASH> 100644
--- a/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
+++ b/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
@@ -71,7 +71,7 @@ import static com.vanniktech.emoji.Utils.checkNotNull;
     // No instances apart from singleton.
   }
 
-  static EmojiManager getInstance() {
+  public static EmojiManager getInstance() {
     return INSTANCE;
   }",Expose instance so that can access replaceWithImages from external packages (#<I>),conventional,feat: make getInstance public
"diff --git a/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java b/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
index <HASH>..<HASH> 100644
--- a/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
+++ b/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
@@ -71,7 +71,7 @@ import static com.vanniktech.emoji.Utils.checkNotNull;
     // No instances apart from singleton.
   }
 
-  static EmojiManager getInstance() {
+  public static EmojiManager getInstance() {
     return INSTANCE;
   }",Expose instance so that can access replaceWithImages from external packages (#<I>),imperative,Expose EmojiManager instance getter as public
"diff --git a/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java b/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
index <HASH>..<HASH> 100644
--- a/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
+++ b/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
@@ -71,7 +71,7 @@ import static com.vanniktech.emoji.Utils.checkNotNull;
     // No instances apart from singleton.
   }
 
-  static EmojiManager getInstance() {
+  public static EmojiManager getInstance() {
     return INSTANCE;
   }",Expose instance so that can access replaceWithImages from external packages (#<I>),minimal,Expose EmojiManager instance getter
"diff --git a/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java b/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
index <HASH>..<HASH> 100644
--- a/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
+++ b/emoji/src/main/java/com/vanniktech/emoji/EmojiManager.java
@@ -71,7 +71,7 @@ import static com.vanniktech.emoji.Utils.checkNotNull;
     // No instances apart from singleton.
   }
 
-  static EmojiManager getInstance() {
+  public static EmojiManager getInstance() {
     return INSTANCE;
   }",Expose instance so that can access replaceWithImages from external packages (#<I>),detailed,"Fix(emoji): Expose getInstance method as public

This commit changes the visibility of the `getInstance()` method in the `EmojiManager` class from package-private to public.

Previously, `getInstance()` was only accessible within the same package, limiting its usability. By making it public, developers can now easily access the EmojiManager instance from anywhere in their code, simplifying emoji initialization and usage.

This change promotes better code reusability and aligns with the intended purpose of the EmojiManager as a singleton accessible throughout the application."
"diff --git a/android/src/com/google/zxing/client/android/ViewfinderView.java b/android/src/com/google/zxing/client/android/ViewfinderView.java
index <HASH>..<HASH> 100755
--- a/android/src/com/google/zxing/client/android/ViewfinderView.java
+++ b/android/src/com/google/zxing/client/android/ViewfinderView.java
@@ -155,7 +155,11 @@ public final class ViewfinderView extends View {
   }
 
   public void drawViewfinder() {
-    resultBitmap = null;
+    Bitmap resultBitmap = this.resultBitmap;
+    this.resultBitmap = null;
+    if (resultBitmap != null) {
+      resultBitmap.recycle();
+    }
     invalidate();
   }","Fixed potential bug in not recycling bitmaps that I spied from BS+

git-svn-id: <URL>",zero_shot,Fix memory leak by recycling the result bitmap in ViewfinderView.
"diff --git a/android/src/com/google/zxing/client/android/ViewfinderView.java b/android/src/com/google/zxing/client/android/ViewfinderView.java
index <HASH>..<HASH> 100755
--- a/android/src/com/google/zxing/client/android/ViewfinderView.java
+++ b/android/src/com/google/zxing/client/android/ViewfinderView.java
@@ -155,7 +155,11 @@ public final class ViewfinderView extends View {
   }
 
   public void drawViewfinder() {
-    resultBitmap = null;
+    Bitmap resultBitmap = this.resultBitmap;
+    this.resultBitmap = null;
+    if (resultBitmap != null) {
+      resultBitmap.recycle();
+    }
     invalidate();
   }","Fixed potential bug in not recycling bitmaps that I spied from BS+

git-svn-id: <URL>",conventional,"fix: recycle resultBitmap in drawViewfinder

The previous implementation of `drawViewfinder` did not recycle the `resultBitmap`, leading to potential memory leaks. This commit ensures that the `resultBitmap` is recycled when `drawViewfinder` is called, preventing memory issues."
"diff --git a/android/src/com/google/zxing/client/android/ViewfinderView.java b/android/src/com/google/zxing/client/android/ViewfinderView.java
index <HASH>..<HASH> 100755
--- a/android/src/com/google/zxing/client/android/ViewfinderView.java
+++ b/android/src/com/google/zxing/client/android/ViewfinderView.java
@@ -155,7 +155,11 @@ public final class ViewfinderView extends View {
   }
 
   public void drawViewfinder() {
-    resultBitmap = null;
+    Bitmap resultBitmap = this.resultBitmap;
+    this.resultBitmap = null;
+    if (resultBitmap != null) {
+      resultBitmap.recycle();
+    }
     invalidate();
   }","Fixed potential bug in not recycling bitmaps that I spied from BS+

git-svn-id: <URL>",imperative,Release and recycle result bitmap in `drawViewfinder`
"diff --git a/android/src/com/google/zxing/client/android/ViewfinderView.java b/android/src/com/google/zxing/client/android/ViewfinderView.java
index <HASH>..<HASH> 100755
--- a/android/src/com/google/zxing/client/android/ViewfinderView.java
+++ b/android/src/com/google/zxing/client/android/ViewfinderView.java
@@ -155,7 +155,11 @@ public final class ViewfinderView extends View {
   }
 
   public void drawViewfinder() {
-    resultBitmap = null;
+    Bitmap resultBitmap = this.resultBitmap;
+    this.resultBitmap = null;
+    if (resultBitmap != null) {
+      resultBitmap.recycle();
+    }
     invalidate();
   }","Fixed potential bug in not recycling bitmaps that I spied from BS+

git-svn-id: <URL>",minimal,Fix: Recycle resultBitmap in drawViewfinder
"diff --git a/android/src/com/google/zxing/client/android/ViewfinderView.java b/android/src/com/google/zxing/client/android/ViewfinderView.java
index <HASH>..<HASH> 100755
--- a/android/src/com/google/zxing/client/android/ViewfinderView.java
+++ b/android/src/com/google/zxing/client/android/ViewfinderView.java
@@ -155,7 +155,11 @@ public final class ViewfinderView extends View {
   }
 
   public void drawViewfinder() {
-    resultBitmap = null;
+    Bitmap resultBitmap = this.resultBitmap;
+    this.resultBitmap = null;
+    if (resultBitmap != null) {
+      resultBitmap.recycle();
+    }
     invalidate();
   }","Fixed potential bug in not recycling bitmaps that I spied from BS+

git-svn-id: <URL>",detailed,
"diff --git a/sentry-core/src/main/java/io/sentry/core/Sentry.java b/sentry-core/src/main/java/io/sentry/core/Sentry.java
index <HASH>..<HASH> 100644
--- a/sentry-core/src/main/java/io/sentry/core/Sentry.java
+++ b/sentry-core/src/main/java/io/sentry/core/Sentry.java
@@ -35,9 +35,10 @@ public final class Sentry {
     }
     IHub hub = currentHub.get();
     if (hub == null) {
-      currentHub.set(mainHub.clone());
+      hub = mainHub.clone();
+      currentHub.set(hub);
     }
-    return currentHub.get();
+    return hub;
   }
 
   /**",Avoid getting a threadlocal twice. (getsentry/sentry-android#<I>),zero_shot,
"diff --git a/sentry-core/src/main/java/io/sentry/core/Sentry.java b/sentry-core/src/main/java/io/sentry/core/Sentry.java
index <HASH>..<HASH> 100644
--- a/sentry-core/src/main/java/io/sentry/core/Sentry.java
+++ b/sentry-core/src/main/java/io/sentry/core/Sentry.java
@@ -35,9 +35,10 @@ public final class Sentry {
     }
     IHub hub = currentHub.get();
     if (hub == null) {
-      currentHub.set(mainHub.clone());
+      hub = mainHub.clone();
+      currentHub.set(hub);
     }
-    return currentHub.get();
+    return hub;
   }
 
   /**",Avoid getting a threadlocal twice. (getsentry/sentry-android#<I>),conventional,
"diff --git a/sentry-core/src/main/java/io/sentry/core/Sentry.java b/sentry-core/src/main/java/io/sentry/core/Sentry.java
index <HASH>..<HASH> 100644
--- a/sentry-core/src/main/java/io/sentry/core/Sentry.java
+++ b/sentry-core/src/main/java/io/sentry/core/Sentry.java
@@ -35,9 +35,10 @@ public final class Sentry {
     }
     IHub hub = currentHub.get();
     if (hub == null) {
-      currentHub.set(mainHub.clone());
+      hub = mainHub.clone();
+      currentHub.set(hub);
     }
-    return currentHub.get();
+    return hub;
   }
 
   /**",Avoid getting a threadlocal twice. (getsentry/sentry-android#<I>),imperative,
"diff --git a/sentry-core/src/main/java/io/sentry/core/Sentry.java b/sentry-core/src/main/java/io/sentry/core/Sentry.java
index <HASH>..<HASH> 100644
--- a/sentry-core/src/main/java/io/sentry/core/Sentry.java
+++ b/sentry-core/src/main/java/io/sentry/core/Sentry.java
@@ -35,9 +35,10 @@ public final class Sentry {
     }
     IHub hub = currentHub.get();
     if (hub == null) {
-      currentHub.set(mainHub.clone());
+      hub = mainHub.clone();
+      currentHub.set(hub);
     }
-    return currentHub.get();
+    return hub;
   }
 
   /**",Avoid getting a threadlocal twice. (getsentry/sentry-android#<I>),minimal,
"diff --git a/sentry-core/src/main/java/io/sentry/core/Sentry.java b/sentry-core/src/main/java/io/sentry/core/Sentry.java
index <HASH>..<HASH> 100644
--- a/sentry-core/src/main/java/io/sentry/core/Sentry.java
+++ b/sentry-core/src/main/java/io/sentry/core/Sentry.java
@@ -35,9 +35,10 @@ public final class Sentry {
     }
     IHub hub = currentHub.get();
     if (hub == null) {
-      currentHub.set(mainHub.clone());
+      hub = mainHub.clone();
+      currentHub.set(hub);
     }
-    return currentHub.get();
+    return hub;
   }
 
   /**",Avoid getting a threadlocal twice. (getsentry/sentry-android#<I>),detailed,
"diff --git a/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java b/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
index <HASH>..<HASH> 100644
--- a/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
+++ b/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
@@ -1,11 +1,8 @@
 package org.mwg;
 
-import javafx.util.Callback;
-import org.junit.Test;
 import org.mwg.core.scheduler.NoopScheduler;
 import org.mwg.plugin.Job;
 
-import java.io.File;
 import java.io.IOException;
 
 public class StorageTest {",delete unused dependency test (failure on bench server),zero_shot,
"diff --git a/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java b/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
index <HASH>..<HASH> 100644
--- a/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
+++ b/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
@@ -1,11 +1,8 @@
 package org.mwg;
 
-import javafx.util.Callback;
-import org.junit.Test;
 import org.mwg.core.scheduler.NoopScheduler;
 import org.mwg.plugin.Job;
 
-import java.io.File;
 import java.io.IOException;
 
 public class StorageTest {",delete unused dependency test (failure on bench server),conventional,
"diff --git a/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java b/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
index <HASH>..<HASH> 100644
--- a/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
+++ b/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
@@ -1,11 +1,8 @@
 package org.mwg;
 
-import javafx.util.Callback;
-import org.junit.Test;
 import org.mwg.core.scheduler.NoopScheduler;
 import org.mwg.plugin.Job;
 
-import java.io.File;
 import java.io.IOException;
 
 public class StorageTest {",delete unused dependency test (failure on bench server),imperative,
"diff --git a/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java b/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
index <HASH>..<HASH> 100644
--- a/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
+++ b/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
@@ -1,11 +1,8 @@
 package org.mwg;
 
-import javafx.util.Callback;
-import org.junit.Test;
 import org.mwg.core.scheduler.NoopScheduler;
 import org.mwg.plugin.Job;
 
-import java.io.File;
 import java.io.IOException;
 
 public class StorageTest {",delete unused dependency test (failure on bench server),minimal,
"diff --git a/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java b/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
index <HASH>..<HASH> 100644
--- a/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
+++ b/plugins/storage/hbase/src/test/java/org/mwg/StorageTest.java
@@ -1,11 +1,8 @@
 package org.mwg;
 
-import javafx.util.Callback;
-import org.junit.Test;
 import org.mwg.core.scheduler.NoopScheduler;
 import org.mwg.plugin.Job;
 
-import java.io.File;
 import java.io.IOException;
 
 public class StorageTest {",delete unused dependency test (failure on bench server),detailed,
"diff --git a/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java b/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
index <HASH>..<HASH> 100644
--- a/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
+++ b/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
@@ -75,7 +75,6 @@ public class NewtsDaemon {
         }
 
         File pidFile = new File(cmdLine.getPidFilename());
-        pidFile.deleteOnExit();
 
         // Daemonize?
         if (cmdLine.isDaemon()) {","NEWTS-<I>: remove redundant deleteOnExit

No need; Gressil does this for us",zero_shot,
"diff --git a/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java b/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
index <HASH>..<HASH> 100644
--- a/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
+++ b/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
@@ -75,7 +75,6 @@ public class NewtsDaemon {
         }
 
         File pidFile = new File(cmdLine.getPidFilename());
-        pidFile.deleteOnExit();
 
         // Daemonize?
         if (cmdLine.isDaemon()) {","NEWTS-<I>: remove redundant deleteOnExit

No need; Gressil does this for us",conventional,
"diff --git a/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java b/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
index <HASH>..<HASH> 100644
--- a/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
+++ b/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
@@ -75,7 +75,6 @@ public class NewtsDaemon {
         }
 
         File pidFile = new File(cmdLine.getPidFilename());
-        pidFile.deleteOnExit();
 
         // Daemonize?
         if (cmdLine.isDaemon()) {","NEWTS-<I>: remove redundant deleteOnExit

No need; Gressil does this for us",imperative,
"diff --git a/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java b/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
index <HASH>..<HASH> 100644
--- a/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
+++ b/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
@@ -75,7 +75,6 @@ public class NewtsDaemon {
         }
 
         File pidFile = new File(cmdLine.getPidFilename());
-        pidFile.deleteOnExit();
 
         // Daemonize?
         if (cmdLine.isDaemon()) {","NEWTS-<I>: remove redundant deleteOnExit

No need; Gressil does this for us",minimal,
"diff --git a/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java b/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
index <HASH>..<HASH> 100644
--- a/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
+++ b/rest/src/main/java/org/opennms/newts/rest/NewtsDaemon.java
@@ -75,7 +75,6 @@ public class NewtsDaemon {
         }
 
         File pidFile = new File(cmdLine.getPidFilename());
-        pidFile.deleteOnExit();
 
         // Daemonize?
         if (cmdLine.isDaemon()) {","NEWTS-<I>: remove redundant deleteOnExit

No need; Gressil does this for us",detailed,
"diff --git a/src/org/citygml4j/model/common/association/Associable.java b/src/org/citygml4j/model/common/association/Associable.java
index <HASH>..<HASH> 100644
--- a/src/org/citygml4j/model/common/association/Associable.java
+++ b/src/org/citygml4j/model/common/association/Associable.java
@@ -1,5 +1,7 @@
 package org.citygml4j.model.common.association;
 
-public interface Associable {
+import org.citygml4j.model.common.base.ModelObject;
+
+public interface Associable extends ModelObject {
 
 }",ensured that only ModelObjects can be Associables,zero_shot,
"diff --git a/src/org/citygml4j/model/common/association/Associable.java b/src/org/citygml4j/model/common/association/Associable.java
index <HASH>..<HASH> 100644
--- a/src/org/citygml4j/model/common/association/Associable.java
+++ b/src/org/citygml4j/model/common/association/Associable.java
@@ -1,5 +1,7 @@
 package org.citygml4j.model.common.association;
 
-public interface Associable {
+import org.citygml4j.model.common.base.ModelObject;
+
+public interface Associable extends ModelObject {
 
 }",ensured that only ModelObjects can be Associables,conventional,
"diff --git a/src/org/citygml4j/model/common/association/Associable.java b/src/org/citygml4j/model/common/association/Associable.java
index <HASH>..<HASH> 100644
--- a/src/org/citygml4j/model/common/association/Associable.java
+++ b/src/org/citygml4j/model/common/association/Associable.java
@@ -1,5 +1,7 @@
 package org.citygml4j.model.common.association;
 
-public interface Associable {
+import org.citygml4j.model.common.base.ModelObject;
+
+public interface Associable extends ModelObject {
 
 }",ensured that only ModelObjects can be Associables,imperative,
"diff --git a/src/org/citygml4j/model/common/association/Associable.java b/src/org/citygml4j/model/common/association/Associable.java
index <HASH>..<HASH> 100644
--- a/src/org/citygml4j/model/common/association/Associable.java
+++ b/src/org/citygml4j/model/common/association/Associable.java
@@ -1,5 +1,7 @@
 package org.citygml4j.model.common.association;
 
-public interface Associable {
+import org.citygml4j.model.common.base.ModelObject;
+
+public interface Associable extends ModelObject {
 
 }",ensured that only ModelObjects can be Associables,minimal,
"diff --git a/src/org/citygml4j/model/common/association/Associable.java b/src/org/citygml4j/model/common/association/Associable.java
index <HASH>..<HASH> 100644
--- a/src/org/citygml4j/model/common/association/Associable.java
+++ b/src/org/citygml4j/model/common/association/Associable.java
@@ -1,5 +1,7 @@
 package org.citygml4j.model.common.association;
 
-public interface Associable {
+import org.citygml4j.model.common.base.ModelObject;
+
+public interface Associable extends ModelObject {
 
 }",ensured that only ModelObjects can be Associables,detailed,
"diff --git a/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java b/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
index <HASH>..<HASH> 100644
--- a/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
+++ b/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
@@ -118,6 +118,7 @@ public class KubernetesResourceUtil {
     static {
         String mapping[] =
             {
+                ""service"", ""Service"",
                 ""svc"", ""Service"",
                 ""rc"", ""ReplicationController"",
                 ""rs"", ""ReplicaSet""",lets allow 'service' as a file kind in addition to 'svc',zero_shot,
"diff --git a/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java b/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
index <HASH>..<HASH> 100644
--- a/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
+++ b/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
@@ -118,6 +118,7 @@ public class KubernetesResourceUtil {
     static {
         String mapping[] =
             {
+                ""service"", ""Service"",
                 ""svc"", ""Service"",
                 ""rc"", ""ReplicationController"",
                 ""rs"", ""ReplicaSet""",lets allow 'service' as a file kind in addition to 'svc',conventional,
"diff --git a/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java b/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
index <HASH>..<HASH> 100644
--- a/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
+++ b/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
@@ -118,6 +118,7 @@ public class KubernetesResourceUtil {
     static {
         String mapping[] =
             {
+                ""service"", ""Service"",
                 ""svc"", ""Service"",
                 ""rc"", ""ReplicationController"",
                 ""rs"", ""ReplicaSet""",lets allow 'service' as a file kind in addition to 'svc',imperative,
"diff --git a/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java b/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
index <HASH>..<HASH> 100644
--- a/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
+++ b/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
@@ -118,6 +118,7 @@ public class KubernetesResourceUtil {
     static {
         String mapping[] =
             {
+                ""service"", ""Service"",
                 ""svc"", ""Service"",
                 ""rc"", ""ReplicationController"",
                 ""rs"", ""ReplicaSet""",lets allow 'service' as a file kind in addition to 'svc',minimal,
"diff --git a/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java b/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
index <HASH>..<HASH> 100644
--- a/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
+++ b/plugin/src/main/java/io/fabric8/maven/plugin/util/KubernetesResourceUtil.java
@@ -118,6 +118,7 @@ public class KubernetesResourceUtil {
     static {
         String mapping[] =
             {
+                ""service"", ""Service"",
                 ""svc"", ""Service"",
                 ""rc"", ""ReplicationController"",
                 ""rs"", ""ReplicaSet""",lets allow 'service' as a file kind in addition to 'svc',detailed,
"diff --git a/src/test/java/org/influxdb/InfluxDBTest.java b/src/test/java/org/influxdb/InfluxDBTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/org/influxdb/InfluxDBTest.java
+++ b/src/test/java/org/influxdb/InfluxDBTest.java
@@ -71,6 +71,7 @@ public class InfluxDBTest {
 			Thread.sleep(100L);
 		} while (!influxDBstarted);
 		this.influxDB.setLogLevel(LogLevel.NONE);
+		System.out.println(""Connected to InfluxDB Version: "" + this.influxDB.version());
 	}
 
 	/**
@@ -476,6 +477,5 @@ public class InfluxDBTest {
 	public void testVersion() {
 		String version = this.influxDB.version();
 		Assert.assertNotNull(version);
-		System.out.println(""Version: "" + version);
 	}
 }",Print the InfluxDB Version used for unit-test.,zero_shot,
"diff --git a/src/test/java/org/influxdb/InfluxDBTest.java b/src/test/java/org/influxdb/InfluxDBTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/org/influxdb/InfluxDBTest.java
+++ b/src/test/java/org/influxdb/InfluxDBTest.java
@@ -71,6 +71,7 @@ public class InfluxDBTest {
 			Thread.sleep(100L);
 		} while (!influxDBstarted);
 		this.influxDB.setLogLevel(LogLevel.NONE);
+		System.out.println(""Connected to InfluxDB Version: "" + this.influxDB.version());
 	}
 
 	/**
@@ -476,6 +477,5 @@ public class InfluxDBTest {
 	public void testVersion() {
 		String version = this.influxDB.version();
 		Assert.assertNotNull(version);
-		System.out.println(""Version: "" + version);
 	}
 }",Print the InfluxDB Version used for unit-test.,conventional,
"diff --git a/src/test/java/org/influxdb/InfluxDBTest.java b/src/test/java/org/influxdb/InfluxDBTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/org/influxdb/InfluxDBTest.java
+++ b/src/test/java/org/influxdb/InfluxDBTest.java
@@ -71,6 +71,7 @@ public class InfluxDBTest {
 			Thread.sleep(100L);
 		} while (!influxDBstarted);
 		this.influxDB.setLogLevel(LogLevel.NONE);
+		System.out.println(""Connected to InfluxDB Version: "" + this.influxDB.version());
 	}
 
 	/**
@@ -476,6 +477,5 @@ public class InfluxDBTest {
 	public void testVersion() {
 		String version = this.influxDB.version();
 		Assert.assertNotNull(version);
-		System.out.println(""Version: "" + version);
 	}
 }",Print the InfluxDB Version used for unit-test.,imperative,
"diff --git a/src/test/java/org/influxdb/InfluxDBTest.java b/src/test/java/org/influxdb/InfluxDBTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/org/influxdb/InfluxDBTest.java
+++ b/src/test/java/org/influxdb/InfluxDBTest.java
@@ -71,6 +71,7 @@ public class InfluxDBTest {
 			Thread.sleep(100L);
 		} while (!influxDBstarted);
 		this.influxDB.setLogLevel(LogLevel.NONE);
+		System.out.println(""Connected to InfluxDB Version: "" + this.influxDB.version());
 	}
 
 	/**
@@ -476,6 +477,5 @@ public class InfluxDBTest {
 	public void testVersion() {
 		String version = this.influxDB.version();
 		Assert.assertNotNull(version);
-		System.out.println(""Version: "" + version);
 	}
 }",Print the InfluxDB Version used for unit-test.,minimal,
"diff --git a/src/test/java/org/influxdb/InfluxDBTest.java b/src/test/java/org/influxdb/InfluxDBTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/org/influxdb/InfluxDBTest.java
+++ b/src/test/java/org/influxdb/InfluxDBTest.java
@@ -71,6 +71,7 @@ public class InfluxDBTest {
 			Thread.sleep(100L);
 		} while (!influxDBstarted);
 		this.influxDB.setLogLevel(LogLevel.NONE);
+		System.out.println(""Connected to InfluxDB Version: "" + this.influxDB.version());
 	}
 
 	/**
@@ -476,6 +477,5 @@ public class InfluxDBTest {
 	public void testVersion() {
 		String version = this.influxDB.version();
 		Assert.assertNotNull(version);
-		System.out.println(""Version: "" + version);
 	}
 }",Print the InfluxDB Version used for unit-test.,detailed,
"diff --git a/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java b/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
index <HASH>..<HASH> 100644
--- a/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
+++ b/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
@@ -142,7 +142,7 @@ public abstract class IssueStorage {
       }
     }
     FieldDiffs diffs = issue.currentChange();
-    if (diffs != null) {
+    if (!issue.isNew() && diffs != null) {
       IssueChangeDto changeDto = IssueChangeDto.of(issue.key(), diffs);
       mapper.insert(changeDto);
     }",SONAR-<I> do not insert changelog when issue is new,zero_shot,Do not save issue changes when the issue is new.
"diff --git a/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java b/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
index <HASH>..<HASH> 100644
--- a/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
+++ b/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
@@ -142,7 +142,7 @@ public abstract class IssueStorage {
       }
     }
     FieldDiffs diffs = issue.currentChange();
-    if (diffs != null) {
+    if (!issue.isNew() && diffs != null) {
       IssueChangeDto changeDto = IssueChangeDto.of(issue.key(), diffs);
       mapper.insert(changeDto);
     }",SONAR-<I> do not insert changelog when issue is new,conventional,fix: Do not create change event on issue creation
"diff --git a/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java b/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
index <HASH>..<HASH> 100644
--- a/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
+++ b/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
@@ -142,7 +142,7 @@ public abstract class IssueStorage {
       }
     }
     FieldDiffs diffs = issue.currentChange();
-    if (diffs != null) {
+    if (!issue.isNew() && diffs != null) {
       IssueChangeDto changeDto = IssueChangeDto.of(issue.key(), diffs);
       mapper.insert(changeDto);
     }",SONAR-<I> do not insert changelog when issue is new,imperative,Do not store issue change event on issue creation
"diff --git a/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java b/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
index <HASH>..<HASH> 100644
--- a/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
+++ b/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
@@ -142,7 +142,7 @@ public abstract class IssueStorage {
       }
     }
     FieldDiffs diffs = issue.currentChange();
-    if (diffs != null) {
+    if (!issue.isNew() && diffs != null) {
       IssueChangeDto changeDto = IssueChangeDto.of(issue.key(), diffs);
       mapper.insert(changeDto);
     }",SONAR-<I> do not insert changelog when issue is new,minimal,Fix: Do not create change when issue is new
"diff --git a/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java b/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
index <HASH>..<HASH> 100644
--- a/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
+++ b/sonar-core/src/main/java/org/sonar/core/issue/db/IssueStorage.java
@@ -142,7 +142,7 @@ public abstract class IssueStorage {
       }
     }
     FieldDiffs diffs = issue.currentChange();
-    if (diffs != null) {
+    if (!issue.isNew() && diffs != null) {
       IssueChangeDto changeDto = IssueChangeDto.of(issue.key(), diffs);
       mapper.insert(changeDto);
     }",SONAR-<I> do not insert changelog when issue is new,detailed,"Fix(core): Avoid creating issue change on issue creation

This commit fixes an issue where an issue change was being created when a new issue was created. This was incorrect because issue changes should only be created when an existing issue is modified.

The fix involves adding a check to ensure that the issue is not new before creating an issue change. This ensures that issue changes are only created for existing issues that have been modified."
"diff --git a/src/test/java/org/dita/dost/util/JobTest.java b/src/test/java/org/dita/dost/util/JobTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/org/dita/dost/util/JobTest.java
+++ b/src/test/java/org/dita/dost/util/JobTest.java
@@ -72,8 +72,8 @@ public final class JobTest {
     }
 
     @Test
-    public void testGetValue() {
-        assertEquals(new File(""/foo/bar"").toURI(), job.getInputDir());
+    public void testGetValue() throws URISyntaxException {
+        assertEquals(new URI(""file:/foo/bar""), job.getInputDir());
     }
 
     @AfterClass",Simplify Job unit test to not rely on File,zero_shot,Fix: Use URI instead of File.toURI() in JobTest to ensure correct URI comparison.
"diff --git a/src/test/java/org/dita/dost/util/JobTest.java b/src/test/java/org/dita/dost/util/JobTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/org/dita/dost/util/JobTest.java
+++ b/src/test/java/org/dita/dost/util/JobTest.java
@@ -72,8 +72,8 @@ public final class JobTest {
     }
 
     @Test
-    public void testGetValue() {
-        assertEquals(new File(""/foo/bar"").toURI(), job.getInputDir());
+    public void testGetValue() throws URISyntaxException {
+        assertEquals(new URI(""file:/foo/bar""), job.getInputDir());
     }
 
     @AfterClass",Simplify Job unit test to not rely on File,conventional,"fix: Use URI instead of File.toURI

The `File.toURI()` method can return a non-hierarchical URI, which is not suitable for use as a base URI. This commit changes the `Job.getInputDir()` method to return a hierarchical URI instead."
"diff --git a/src/test/java/org/dita/dost/util/JobTest.java b/src/test/java/org/dita/dost/util/JobTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/org/dita/dost/util/JobTest.java
+++ b/src/test/java/org/dita/dost/util/JobTest.java
@@ -72,8 +72,8 @@ public final class JobTest {
     }
 
     @Test
-    public void testGetValue() {
-        assertEquals(new File(""/foo/bar"").toURI(), job.getInputDir());
+    public void testGetValue() throws URISyntaxException {
+        assertEquals(new URI(""file:/foo/bar""), job.getInputDir());
     }
 
     @AfterClass",Simplify Job unit test to not rely on File,imperative,"Fix: Compare URI instead of File.toURI

The `Job.getInputDir()` method returns a URI, not a File.toURI(). This commit updates the test to compare URI objects directly."
"diff --git a/src/test/java/org/dita/dost/util/JobTest.java b/src/test/java/org/dita/dost/util/JobTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/org/dita/dost/util/JobTest.java
+++ b/src/test/java/org/dita/dost/util/JobTest.java
@@ -72,8 +72,8 @@ public final class JobTest {
     }
 
     @Test
-    public void testGetValue() {
-        assertEquals(new File(""/foo/bar"").toURI(), job.getInputDir());
+    public void testGetValue() throws URISyntaxException {
+        assertEquals(new URI(""file:/foo/bar""), job.getInputDir());
     }
 
     @AfterClass",Simplify Job unit test to not rely on File,minimal,"Fix: Use URI instead of File.toURI

Use URI to represent file paths in Job class. This avoids potential issues with different file system representations."
"diff --git a/src/test/java/org/dita/dost/util/JobTest.java b/src/test/java/org/dita/dost/util/JobTest.java
index <HASH>..<HASH> 100644
--- a/src/test/java/org/dita/dost/util/JobTest.java
+++ b/src/test/java/org/dita/dost/util/JobTest.java
@@ -72,8 +72,8 @@ public final class JobTest {
     }
 
     @Test
-    public void testGetValue() {
-        assertEquals(new File(""/foo/bar"").toURI(), job.getInputDir());
+    public void testGetValue() throws URISyntaxException {
+        assertEquals(new URI(""file:/foo/bar""), job.getInputDir());
     }
 
     @AfterClass",Simplify Job unit test to not rely on File,detailed,"Fix: Use URI instead of File.toURI() in Job.getInputDir() test

The `Job.getInputDir()` method returns a `URI` object, but the corresponding test `JobTest.testGetValue()` was comparing it to a `File.toURI()` object. This could lead to subtle differences and potential test failures depending on the underlying platform and file system.

This commit changes the test to directly create a `URI` object for comparison, ensuring that the test accurately reflects the expected behavior of the `Job.getInputDir()` method and avoids potential false negatives."
"diff --git a/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java b/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
index <HASH>..<HASH> 100644
--- a/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
+++ b/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
@@ -58,7 +58,6 @@ public class SQL {
 			DEFAULT.driver(driver);
 			DEFAULT.user(username);
 			DEFAULT.password(password);
-			DEFAULT.pooled();
 
 			String maskedPassword = U.isEmpty(password) ? ""<empty>"" : ""<specified>"";
 			Log.info(""Initialized the default JDBC/SQL API"", ""url"", url, ""driver"", driver, ""username"", username,",The SQL API will not be pooled by default.,zero_shot,Fix: Do not pool the default SQL connection and mask the password for security.
"diff --git a/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java b/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
index <HASH>..<HASH> 100644
--- a/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
+++ b/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
@@ -58,7 +58,6 @@ public class SQL {
 			DEFAULT.driver(driver);
 			DEFAULT.user(username);
 			DEFAULT.password(password);
-			DEFAULT.pooled();
 
 			String maskedPassword = U.isEmpty(password) ? ""<empty>"" : ""<specified>"";
 			Log.info(""Initialized the default JDBC/SQL API"", ""url"", url, ""driver"", driver, ""username"", username,",The SQL API will not be pooled by default.,conventional,"fix: remove redundant pooled() call in SQL initialization

The `pooled()` call was removed from the default SQL initialization as it's no longer necessary and might cause issues with connection pooling configuration. The connection pooling is now handled internally without the need for an explicit `pooled()` call."
"diff --git a/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java b/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
index <HASH>..<HASH> 100644
--- a/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
+++ b/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
@@ -58,7 +58,6 @@ public class SQL {
 			DEFAULT.driver(driver);
 			DEFAULT.user(username);
 			DEFAULT.password(password);
-			DEFAULT.pooled();
 
 			String maskedPassword = U.isEmpty(password) ? ""<empty>"" : ""<specified>"";
 			Log.info(""Initialized the default JDBC/SQL API"", ""url"", url, ""driver"", driver, ""username"", username,",The SQL API will not be pooled by default.,imperative,Initialize the default JDBC/SQL API without pooling.
"diff --git a/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java b/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
index <HASH>..<HASH> 100644
--- a/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
+++ b/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
@@ -58,7 +58,6 @@ public class SQL {
 			DEFAULT.driver(driver);
 			DEFAULT.user(username);
 			DEFAULT.password(password);
-			DEFAULT.pooled();
 
 			String maskedPassword = U.isEmpty(password) ? ""<empty>"" : ""<specified>"";
 			Log.info(""Initialized the default JDBC/SQL API"", ""url"", url, ""driver"", driver, ""username"", username,",The SQL API will not be pooled by default.,minimal,"Fix: Do not pool default SQL connection by default

The default SQL connection shouldn't be pooled by default."
"diff --git a/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java b/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
index <HASH>..<HASH> 100644
--- a/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
+++ b/rapidoid-sql/src/main/java/org/rapidoid/sql/SQL.java
@@ -58,7 +58,6 @@ public class SQL {
 			DEFAULT.driver(driver);
 			DEFAULT.user(username);
 			DEFAULT.password(password);
-			DEFAULT.pooled();
 
 			String maskedPassword = U.isEmpty(password) ? ""<empty>"" : ""<specified>"";
 			Log.info(""Initialized the default JDBC/SQL API"", ""url"", url, ""driver"", driver, ""username"", username,",The SQL API will not be pooled by default.,detailed,"Fix: Remove default pooling in SQL initialization

The `SQL.init()` method was automatically enabling connection pooling by calling `DEFAULT.pooled()`. This commit removes this default pooling to provide more explicit control over connection pooling behavior.

- Removed the `DEFAULT.pooled()` call from the `SQL.init()` method.
- This change ensures that connection pooling is only enabled when explicitly configured by the user, preventing unexpected behavior and resource usage."
